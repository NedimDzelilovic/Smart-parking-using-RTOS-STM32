
ums.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b0  0800a6b0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b8  0800a6b8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00005d20  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005e20  20005e20  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197a2  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb7  00000000  00000000  000398d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0003ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002563f  00000000  00000000  000401a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ae2  00000000  00000000  000657e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52b1  00000000  00000000  0007f2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015457a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ad0  00000000  00000000  001545cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a528 	.word	0x0800a528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800a528 	.word	0x0800a528

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000011c 	.word	0x2000011c
 8000504:	20000170 	.word	0x20000170

08000508 <USBRxHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USBRxHandler(uint8_t* buf, uint16_t Len){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
	USBDataReady = 1;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <USBRxHandler+0x2c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	Buffer = buf;
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <USBRxHandler+0x30>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6013      	str	r3, [r2, #0]
	buflen = Len;
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <USBRxHandler+0x34>)
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	8013      	strh	r3, [r2, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000460 	.word	0x20000460
 8000538:	20000464 	.word	0x20000464
 800053c:	20000468 	.word	0x20000468

08000540 <delay>:
//motor deklaracija
void delay(uint16_t us) {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <delay+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000552:	bf00      	nop
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <delay+0x30>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3f9      	bcc.n	8000554 <delay+0x14>
		;
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000370 	.word	0x20000370

08000574 <stepper_set_rpm>:

void stepper_set_rpm(int rpm) // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	delay(60000000 / 4096 / rpm);
 800057c:	f643 1238 	movw	r2, #14648	; 0x3938
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	fb92 f3f3 	sdiv	r3, r2, r3
 8000586:	b29b      	uxth	r3, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ffd9 	bl	8000540 <delay>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <stepper_half_drive_gate>:

void stepper_half_drive_gate(int step) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	switch (step) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b07      	cmp	r3, #7
 80005a4:	f200 80dc 	bhi.w	8000760 <stepper_half_drive_gate+0x1c8>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <stepper_half_drive_gate+0x18>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005d1 	.word	0x080005d1
 80005b4:	08000603 	.word	0x08000603
 80005b8:	08000635 	.word	0x08000635
 80005bc:	08000667 	.word	0x08000667
 80005c0:	08000699 	.word	0x08000699
 80005c4:	080006cb 	.word	0x080006cb
 80005c8:	080006fd 	.word	0x080006fd
 80005cc:	0800072f 	.word	0x0800072f
	case 0:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // IN1
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d6:	4864      	ldr	r0, [pc, #400]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80005d8:	f001 fc12 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);   // IN2
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	4861      	ldr	r0, [pc, #388]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80005e4:	f001 fc0c 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);   // IN3
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	485e      	ldr	r0, [pc, #376]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80005f0:	f001 fc06 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	485c      	ldr	r0, [pc, #368]	; (800076c <stepper_half_drive_gate+0x1d4>)
 80005fc:	f001 fc00 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000600:	e0ae      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 1:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // IN1
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	4857      	ldr	r0, [pc, #348]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800060a:	f001 fbf9 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);   // IN2
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4854      	ldr	r0, [pc, #336]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000616:	f001 fbf3 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);   // IN3
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000620:	4851      	ldr	r0, [pc, #324]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000622:	f001 fbed 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062c:	484f      	ldr	r0, [pc, #316]	; (800076c <stepper_half_drive_gate+0x1d4>)
 800062e:	f001 fbe7 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000632:	e095      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 2:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);   // IN1
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	484b      	ldr	r0, [pc, #300]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800063c:	f001 fbe0 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);   // IN2
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4848      	ldr	r0, [pc, #288]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000648:	f001 fbda 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);   // IN3
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4845      	ldr	r0, [pc, #276]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000654:	f001 fbd4 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065e:	4843      	ldr	r0, [pc, #268]	; (800076c <stepper_half_drive_gate+0x1d4>)
 8000660:	f001 fbce 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000664:	e07c      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 3:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);   // IN1
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	483e      	ldr	r0, [pc, #248]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800066e:	f001 fbc7 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);   // IN2
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	483b      	ldr	r0, [pc, #236]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800067a:	f001 fbc1 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);   // IN3
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	4838      	ldr	r0, [pc, #224]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000686:	f001 fbbb 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	4836      	ldr	r0, [pc, #216]	; (800076c <stepper_half_drive_gate+0x1d4>)
 8000692:	f001 fbb5 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000696:	e063      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 4:

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);   // IN1
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069e:	4832      	ldr	r0, [pc, #200]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006a0:	f001 fbae 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);   // IN2
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	482f      	ldr	r0, [pc, #188]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006ac:	f001 fba8 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);   // IN3
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006b8:	f001 fba2 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	482a      	ldr	r0, [pc, #168]	; (800076c <stepper_half_drive_gate+0x1d4>)
 80006c4:	f001 fb9c 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80006c8:	e04a      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 5:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);   // IN1
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4825      	ldr	r0, [pc, #148]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006d2:	f001 fb95 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);   // IN2
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	4822      	ldr	r0, [pc, #136]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006de:	f001 fb8f 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);   // IN3
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 80006ea:	f001 fb89 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	481d      	ldr	r0, [pc, #116]	; (800076c <stepper_half_drive_gate+0x1d4>)
 80006f6:	f001 fb83 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80006fa:	e031      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 6:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);   // IN1
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000702:	4819      	ldr	r0, [pc, #100]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000704:	f001 fb7c 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);   // IN2
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000710:	f001 fb76 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);   // IN3
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800071c:	f001 fb70 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <stepper_half_drive_gate+0x1d4>)
 8000728:	f001 fb6a 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 800072c:	e018      	b.n	8000760 <stepper_half_drive_gate+0x1c8>

	case 7:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // IN1
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000736:	f001 fb63 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);   // IN2
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 8000742:	f001 fb5d 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);   // IN3
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <stepper_half_drive_gate+0x1d0>)
 800074e:	f001 fb57 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <stepper_half_drive_gate+0x1d4>)
 800075a:	f001 fb51 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 800075e:	bf00      	nop
	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	40020400 	.word	0x40020400

08000770 <stepper_half_drive_gate2>:
//motor2
void stepper_half_drive_gate2(int step) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	switch (step) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b07      	cmp	r3, #7
 800077c:	f200 80c4 	bhi.w	8000908 <stepper_half_drive_gate2+0x198>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <stepper_half_drive_gate2+0x18>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	080007a9 	.word	0x080007a9
 800078c:	080007d5 	.word	0x080007d5
 8000790:	08000801 	.word	0x08000801
 8000794:	0800082d 	.word	0x0800082d
 8000798:	08000859 	.word	0x08000859
 800079c:	08000885 	.word	0x08000885
 80007a0:	080008b1 	.word	0x080008b1
 80007a4:	080008dd 	.word	0x080008dd
	case 0:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 80007a8:	2201      	movs	r2, #1
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80007ae:	f001 fb27 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 80007b2:	2200      	movs	r2, #0
 80007b4:	2110      	movs	r1, #16
 80007b6:	4856      	ldr	r0, [pc, #344]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80007b8:	f001 fb22 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4854      	ldr	r0, [pc, #336]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80007c4:	f001 fb1c 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	4851      	ldr	r0, [pc, #324]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80007ce:	f001 fb17 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80007d2:	e099      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 1:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 80007d4:	2201      	movs	r2, #1
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	484d      	ldr	r0, [pc, #308]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80007da:	f001 fb11 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80007e4:	f001 fb0c 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	4849      	ldr	r0, [pc, #292]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80007f0:	f001 fb06 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	4846      	ldr	r0, [pc, #280]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80007fa:	f001 fb01 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80007fe:	e083      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 2:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000800:	2200      	movs	r2, #0
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4842      	ldr	r0, [pc, #264]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 8000806:	f001 fafb 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 800080a:	2201      	movs	r2, #1
 800080c:	2110      	movs	r1, #16
 800080e:	4840      	ldr	r0, [pc, #256]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 8000810:	f001 faf6 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 800081c:	f001 faf0 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	483b      	ldr	r0, [pc, #236]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 8000826:	f001 faeb 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 800082a:	e06d      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 3:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 800082c:	2200      	movs	r2, #0
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4837      	ldr	r0, [pc, #220]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 8000832:	f001 fae5 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 8000836:	2201      	movs	r2, #1
 8000838:	2110      	movs	r1, #16
 800083a:	4835      	ldr	r0, [pc, #212]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 800083c:	f001 fae0 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	4833      	ldr	r0, [pc, #204]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 8000848:	f001 fada 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	4830      	ldr	r0, [pc, #192]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 8000852:	f001 fad5 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000856:	e057      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 4:

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	482c      	ldr	r0, [pc, #176]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 800085e:	f001 facf 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	482a      	ldr	r0, [pc, #168]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 8000868:	f001 faca 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4828      	ldr	r0, [pc, #160]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 8000874:	f001 fac4 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000878:	2200      	movs	r2, #0
 800087a:	2110      	movs	r1, #16
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 800087e:	f001 fabf 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000882:	e041      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 5:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 800088a:	f001 fab9 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 8000894:	f001 fab4 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80008a0:	f001 faae 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80008a4:	2201      	movs	r2, #1
 80008a6:	2110      	movs	r1, #16
 80008a8:	481a      	ldr	r0, [pc, #104]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80008aa:	f001 faa9 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80008ae:	e02b      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 6:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80008b6:	f001 faa3 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 80008ba:	2200      	movs	r2, #0
 80008bc:	2110      	movs	r1, #16
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80008c0:	f001 fa9e 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80008cc:	f001 fa98 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80008d6:	f001 fa93 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 80008da:	e015      	b.n	8000908 <stepper_half_drive_gate2+0x198>

	case 7:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 80008dc:	2201      	movs	r2, #1
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80008e2:	f001 fa8d 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <stepper_half_drive_gate2+0x1a0>)
 80008ec:	f001 fa88 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 80008f8:	f001 fa82 	bl	8001e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <stepper_half_drive_gate2+0x1a4>)
 8000902:	f001 fa7d 	bl	8001e00 <HAL_GPIO_WritePin>
		break;
 8000906:	bf00      	nop
	}
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	40020400 	.word	0x40020400

08000918 <delay_ms_soft>:
void delay_ms_soft(uint32_t ms)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	volatile uint32_t k = 10500 * ms;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f642 1204 	movw	r2, #10500	; 0x2904
 8000926:	fb02 f303 	mul.w	r3, r2, r3
 800092a:	60fb      	str	r3, [r7, #12]
	while(k--);
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1e5a      	subs	r2, r3, #1
 8000932:	60fa      	str	r2, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1fa      	bne.n	800092e <delay_ms_soft+0x16>
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b0b2      	sub	sp, #200	; 0xc8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b77      	ldr	r3, [pc, #476]	; (8000b30 <main+0x1e8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a76      	ldr	r2, [pc, #472]	; (8000b30 <main+0x1e8>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b74      	ldr	r3, [pc, #464]	; (8000b30 <main+0x1e8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_6;
 800096a:	2345      	movs	r3, #69	; 0x45
 800096c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000982:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000986:	4619      	mov	r1, r3
 8000988:	486a      	ldr	r0, [pc, #424]	; (8000b34 <main+0x1ec>)
 800098a:	f001 f885 	bl	8001a98 <HAL_GPIO_Init>

		__HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <main+0x1e8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <main+0x1e8>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <main+0x1e8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9;
 80009aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80009ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009c8:	4619      	mov	r1, r3
 80009ca:	485b      	ldr	r0, [pc, #364]	; (8000b38 <main+0x1f0>)
 80009cc:	f001 f864 	bl	8001a98 <HAL_GPIO_Init>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <main+0x1e8>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <main+0x1e8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <main+0x1e8>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

		GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	484b      	ldr	r0, [pc, #300]	; (8000b3c <main+0x1f4>)
 8000a0e:	f001 f843 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fef9 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f8b1 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fa29 	bl	8000e70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a1e:	f000 f915 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a22:	f000 f961 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a26:	f000 f9ad 	bl	8000d84 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000a2a:	4845      	ldr	r0, [pc, #276]	; (8000b40 <main+0x1f8>)
 8000a2c:	f003 f984 	bl	8003d38 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000a30:	4844      	ldr	r0, [pc, #272]	; (8000b44 <main+0x1fc>)
 8000a32:	f003 f981 	bl	8003d38 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000a36:	4844      	ldr	r0, [pc, #272]	; (8000b48 <main+0x200>)
 8000a38:	f003 f97e 	bl	8003d38 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4842      	ldr	r0, [pc, #264]	; (8000b48 <main+0x200>)
 8000a40:	f003 faac 	bl	8003f9c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of motorRampa */
  osThreadDef(motorRampa, motorRampa_init, osPriorityNormal, 0, 128);
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <main+0x204>)
 8000a46:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorRampaHandle = osThreadCreate(osThread(motorRampa), NULL);
 8000a58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fdad 	bl	80085be <osThreadCreate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <main+0x208>)
 8000a68:	6013      	str	r3, [r2, #0]

  /* definition and creation of lightShow */
  osThreadDef(lightShow, lightShow_init, osPriorityNormal, 0, 128);
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <main+0x20c>)
 8000a6c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000a70:	461d      	mov	r5, r3
 8000a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lightShowHandle = osThreadCreate(osThread(lightShow), NULL);
 8000a7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 fd9a 	bl	80085be <osThreadCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <main+0x210>)
 8000a8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of interfon */
  osThreadDef(interfon, interfon_init, osPriorityNormal, 0, 128);
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <main+0x214>)
 8000a92:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000a96:	461d      	mov	r5, r3
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  interfonHandle = osThreadCreate(osThread(interfon), NULL);
 8000aa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fd87 	bl	80085be <osThreadCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <main+0x218>)
 8000ab4:	6013      	str	r3, [r2, #0]

  /* definition and creation of citacVrata */
  osThreadDef(citacVrata, citacVrata_init, osPriorityNormal, 0, 128);
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <main+0x21c>)
 8000ab8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000abc:	461d      	mov	r5, r3
 8000abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  citacVrataHandle = osThreadCreate(osThread(citacVrata), NULL);
 8000aca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fd74 	bl	80085be <osThreadCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <main+0x220>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* definition and creation of displej */
  osThreadDef(displej, displej_init, osPriorityNormal, 0, 128);
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <main+0x224>)
 8000ade:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ae2:	461d      	mov	r5, r3
 8000ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displejHandle = osThreadCreate(osThread(displej), NULL);
 8000af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 fd61 	bl	80085be <osThreadCreate>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <main+0x228>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* definition and creation of pomocni */
  osThreadDef(pomocni, pomocni_init, osPriorityNormal, 0, 128);
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <main+0x22c>)
 8000b04:	f107 040c 	add.w	r4, r7, #12
 8000b08:	461d      	mov	r5, r3
 8000b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pomocniHandle = osThreadCreate(osThread(pomocni), NULL);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 fd4e 	bl	80085be <osThreadCreate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <main+0x230>)
 8000b26:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b28:	f007 fd42 	bl	80085b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <main+0x1e4>
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	20000370 	.word	0x20000370
 8000b44:	200003b8 	.word	0x200003b8
 8000b48:	20000400 	.word	0x20000400
 8000b4c:	0800a580 	.word	0x0800a580
 8000b50:	20000448 	.word	0x20000448
 8000b54:	0800a59c 	.word	0x0800a59c
 8000b58:	2000044c 	.word	0x2000044c
 8000b5c:	0800a5b8 	.word	0x0800a5b8
 8000b60:	20000450 	.word	0x20000450
 8000b64:	0800a5d4 	.word	0x0800a5d4
 8000b68:	20000454 	.word	0x20000454
 8000b6c:	0800a5f0 	.word	0x0800a5f0
 8000b70:	20000458 	.word	0x20000458
 8000b74:	0800a60c 	.word	0x0800a60c
 8000b78:	2000045c 	.word	0x2000045c

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2230      	movs	r2, #48	; 0x30
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f009 fcb0 	bl	800a4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <SystemClock_Config+0xc8>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <SystemClock_Config+0xc8>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <SystemClock_Config+0xc8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bf0:	2348      	movs	r3, #72	; 0x48
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fb93 	bl	800332c <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c0c:	f000 fc6c 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fdf5 	bl	800381c <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c38:	f000 fc56 	bl	80014e8 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3750      	adds	r7, #80	; 0x50
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c72:	2247      	movs	r2, #71	; 0x47
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xfffff-1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c90:	f003 f802 	bl	8003c98 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fc25 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000cac:	f003 fc08 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 fc17 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000cc8:	f003 fffa 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000cd2:	f000 fc09 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000370 	.word	0x20000370
 8000ce4:	000ffffe 	.word	0x000ffffe

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <MX_TIM3_Init+0x98>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d0c:	2247      	movs	r2, #71	; 0x47
 8000d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d2c:	f002 ffb4 	bl	8003c98 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 fbd7 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d48:	f003 fbba 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 fbc9 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM3_Init+0x94>)
 8000d64:	f003 ffac 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d6e:	f000 fbbb 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200003b8 	.word	0x200003b8
 8000d80:	40000400 	.word	0x40000400

08000d84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <MX_TIM4_Init+0xe8>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1107-1;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000dbc:	f240 4252 	movw	r2, #1106	; 0x452
 8000dc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000dca:	2214      	movs	r2, #20
 8000dcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dda:	4823      	ldr	r0, [pc, #140]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000ddc:	f002 ff5c 	bl	8003c98 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000de6:	f000 fb7f 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000df8:	f003 fb62 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e02:	f000 fb71 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000e08:	f003 f86e 	bl	8003ee8 <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e12:	f000 fb69 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000e26:	f003 ff4b 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e30:	f000 fb5a 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2204      	movs	r2, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000e4c:	f003 fa76 	bl	800433c <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e56:	f000 fb47 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM4_Init+0xe4>)
 8000e5c:	f000 fbc2 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3738      	adds	r7, #56	; 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000400 	.word	0x20000400
 8000e6c:	40000800 	.word	0x40000800

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a40      	ldr	r2, [pc, #256]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a39      	ldr	r2, [pc, #228]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f64a 2150 	movw	r1, #43600	; 0xaa50
 8000f34:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <MX_GPIO_Init+0x178>)
 8000f36:	f000 ff63 	bl	8001e00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	482b      	ldr	r0, [pc, #172]	; (8000fec <MX_GPIO_Init+0x17c>)
 8000f40:	f000 ff5e 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 611b 	mov.w	r1, #2480	; 0x9b0
 8000f4a:	4829      	ldr	r0, [pc, #164]	; (8000ff0 <MX_GPIO_Init+0x180>)
 8000f4c:	f000 ff58 	bl	8001e00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE6 PE9 PE11
                           PE13 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11
 8000f50:	f64a 2350 	movw	r3, #43600	; 0xaa50
 8000f54:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0x178>)
 8000f6a:	f000 fd95 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <MX_GPIO_Init+0x178>)
 8000f82:	f000 fd89 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <MX_GPIO_Init+0x184>)
 8000f9c:	f000 fd7c 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_GPIO_Init+0x17c>)
 8000fb8:	f000 fd6e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB4 PB5 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8000fbc:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
 8000fc0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_GPIO_Init+0x180>)
 8000fd6:	f000 fd5f 	bl	8001a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <motorRampa_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_motorRampa_init */
void motorRampa_init(void const * argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001000:	f008 fd0c 	bl	8009a1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  //uint8_t prev_state = 0;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f007 fb26 	bl	8008656 <osDelay>
    //Otvaranje rampe kada primi poruku open od citaca
	if(USBDataReady == 1 && (strncmp(Buffer,"Open\n",buflen)==0)){
 800100a:	4b73      	ldr	r3, [pc, #460]	; (80011d8 <motorRampa_init+0x1e0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d172      	bne.n	80010f8 <motorRampa_init+0x100>
 8001012:	4b72      	ldr	r3, [pc, #456]	; (80011dc <motorRampa_init+0x1e4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <motorRampa_init+0x1e8>)
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	4972      	ldr	r1, [pc, #456]	; (80011e4 <motorRampa_init+0x1ec>)
 800101c:	4618      	mov	r0, r3
 800101e:	f009 fa6f 	bl	800a500 <strncmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d167      	bne.n	80010f8 <motorRampa_init+0x100>
	float anglepersequence = 0.703125;
 8001028:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <motorRampa_init+0x1f0>)
 800102a:	617b      	str	r3, [r7, #20]
	uint32_t angle_sequence = (int) (90 / anglepersequence);
 800102c:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80011ec <motorRampa_init+0x1f4>
 8001030:	ed97 7a05 	vldr	s14, [r7, #20]
 8001034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	ee17 3a90 	vmov	r3, s15
 8001040:	613b      	str	r3, [r7, #16]
	uint32_t temp_angle_sequence = angle_sequence;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
	while (temp_angle_sequence) {
 8001046:	e011      	b.n	800106c <motorRampa_init+0x74>
		for (int step = 7; step >= 0; step--) {
 8001048:	2307      	movs	r3, #7
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
 800104c:	e008      	b.n	8001060 <motorRampa_init+0x68>
			stepper_half_drive_gate(step);
 800104e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001050:	f7ff faa2 	bl	8000598 <stepper_half_drive_gate>
			stepper_set_rpm(13);
 8001054:	200d      	movs	r0, #13
 8001056:	f7ff fa8d 	bl	8000574 <stepper_set_rpm>
		for (int step = 7; step >= 0; step--) {
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105c:	3b01      	subs	r3, #1
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001062:	2b00      	cmp	r3, #0
 8001064:	daf3      	bge.n	800104e <motorRampa_init+0x56>
		}
		temp_angle_sequence--;
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	3b01      	subs	r3, #1
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
	while (temp_angle_sequence) {
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ea      	bne.n	8001048 <motorRampa_init+0x50>
	}
	HAL_Delay(3000);
 8001072:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001076:	f000 fc09 	bl	800188c <HAL_Delay>
	while (temp_angle_sequence <= angle_sequence) {
 800107a:	e036      	b.n	80010ea <motorRampa_init+0xf2>
		for (int step = 0; step < 8; step++) {
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001080:	e008      	b.n	8001094 <motorRampa_init+0x9c>
			stepper_half_drive_gate(step);
 8001082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001084:	f7ff fa88 	bl	8000598 <stepper_half_drive_gate>
			stepper_set_rpm(13);
 8001088:	200d      	movs	r0, #13
 800108a:	f7ff fa73 	bl	8000574 <stepper_set_rpm>
		for (int step = 0; step < 8; step++) {
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	3301      	adds	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	2b07      	cmp	r3, #7
 8001098:	ddf3      	ble.n	8001082 <motorRampa_init+0x8a>
		}
		++temp_angle_sequence;
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	3301      	adds	r3, #1
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) == 0) {
 80010a0:	2120      	movs	r1, #32
 80010a2:	4853      	ldr	r0, [pc, #332]	; (80011f0 <motorRampa_init+0x1f8>)
 80010a4:	f000 fe94 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d11d      	bne.n	80010ea <motorRampa_init+0xf2>
		HAL_Delay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b2:	f000 fbeb 	bl	800188c <HAL_Delay>
		while (temp_angle_sequence) {
 80010b6:	e011      	b.n	80010dc <motorRampa_init+0xe4>
			for (int step = 7; step >= 0; step--) {
 80010b8:	2307      	movs	r3, #7
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80010bc:	e008      	b.n	80010d0 <motorRampa_init+0xd8>
				stepper_half_drive_gate(step);
 80010be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010c0:	f7ff fa6a 	bl	8000598 <stepper_half_drive_gate>
				stepper_set_rpm(4);
 80010c4:	2004      	movs	r0, #4
 80010c6:	f7ff fa55 	bl	8000574 <stepper_set_rpm>
			for (int step = 7; step >= 0; step--) {
 80010ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010cc:	3b01      	subs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	daf3      	bge.n	80010be <motorRampa_init+0xc6>
			}
			temp_angle_sequence--;
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	3b01      	subs	r3, #1
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
		while (temp_angle_sequence) {
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1ea      	bne.n	80010b8 <motorRampa_init+0xc0>
		}
		HAL_Delay(3000);
 80010e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e6:	f000 fbd1 	bl	800188c <HAL_Delay>
	while (temp_angle_sequence <= angle_sequence) {
 80010ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d9c4      	bls.n	800107c <motorRampa_init+0x84>
		}
	}

	USBDataReady = 0;
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <motorRampa_init+0x1e0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
	//Buffer = 0;
	//buflen = 0;
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	483d      	ldr	r0, [pc, #244]	; (80011f4 <motorRampa_init+0x1fc>)
 80010fe:	f000 fe67 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f af7d 	bne.w	8001004 <motorRampa_init+0xc>
			float anglepersequence = 0.703125;
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <motorRampa_init+0x1f0>)
 800110c:	60fb      	str	r3, [r7, #12]
			uint32_t angle_sequence = (int) (90 / anglepersequence);
 800110e:	eddf 6a37 	vldr	s13, [pc, #220]	; 80011ec <motorRampa_init+0x1f4>
 8001112:	ed97 7a03 	vldr	s14, [r7, #12]
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 3a90 	vmov	r3, s15
 8001122:	60bb      	str	r3, [r7, #8]
			uint32_t temp_angle_sequence = angle_sequence;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
			while (temp_angle_sequence) {
 8001128:	e011      	b.n	800114e <motorRampa_init+0x156>
				for (int step = 7; step >= 0; step--) {
 800112a:	2307      	movs	r3, #7
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	e008      	b.n	8001142 <motorRampa_init+0x14a>
					stepper_half_drive_gate(step);
 8001130:	6a38      	ldr	r0, [r7, #32]
 8001132:	f7ff fa31 	bl	8000598 <stepper_half_drive_gate>
					stepper_set_rpm(13);
 8001136:	200d      	movs	r0, #13
 8001138:	f7ff fa1c 	bl	8000574 <stepper_set_rpm>
				for (int step = 7; step >= 0; step--) {
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	3b01      	subs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	daf3      	bge.n	8001130 <motorRampa_init+0x138>
				}
				temp_angle_sequence--;
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b01      	subs	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
			while (temp_angle_sequence) {
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1ea      	bne.n	800112a <motorRampa_init+0x132>
			}
			HAL_Delay(3000);
 8001154:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001158:	f000 fb98 	bl	800188c <HAL_Delay>
			while (temp_angle_sequence <= angle_sequence) {
 800115c:	e036      	b.n	80011cc <motorRampa_init+0x1d4>
				for (int step = 0; step < 8; step++) {
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e008      	b.n	8001176 <motorRampa_init+0x17e>
					stepper_half_drive_gate(step);
 8001164:	69f8      	ldr	r0, [r7, #28]
 8001166:	f7ff fa17 	bl	8000598 <stepper_half_drive_gate>
					stepper_set_rpm(13);
 800116a:	200d      	movs	r0, #13
 800116c:	f7ff fa02 	bl	8000574 <stepper_set_rpm>
				for (int step = 0; step < 8; step++) {
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	3301      	adds	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b07      	cmp	r3, #7
 800117a:	ddf3      	ble.n	8001164 <motorRampa_init+0x16c>
				}
				++temp_angle_sequence;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3301      	adds	r3, #1
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) == 0) {
 8001182:	2120      	movs	r1, #32
 8001184:	481a      	ldr	r0, [pc, #104]	; (80011f0 <motorRampa_init+0x1f8>)
 8001186:	f000 fe23 	bl	8001dd0 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11d      	bne.n	80011cc <motorRampa_init+0x1d4>
				HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f000 fb7a 	bl	800188c <HAL_Delay>
				while (temp_angle_sequence) {
 8001198:	e011      	b.n	80011be <motorRampa_init+0x1c6>
					for (int step = 7; step >= 0; step--) {
 800119a:	2307      	movs	r3, #7
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	e008      	b.n	80011b2 <motorRampa_init+0x1ba>
						stepper_half_drive_gate(step);
 80011a0:	69b8      	ldr	r0, [r7, #24]
 80011a2:	f7ff f9f9 	bl	8000598 <stepper_half_drive_gate>
						stepper_set_rpm(4);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f7ff f9e4 	bl	8000574 <stepper_set_rpm>
					for (int step = 7; step >= 0; step--) {
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	daf3      	bge.n	80011a0 <motorRampa_init+0x1a8>
					}
					temp_angle_sequence--;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	3b01      	subs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
				while (temp_angle_sequence) {
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ea      	bne.n	800119a <motorRampa_init+0x1a2>
				}
				HAL_Delay(3000);
 80011c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c8:	f000 fb60 	bl	800188c <HAL_Delay>
			while (temp_angle_sequence <= angle_sequence) {
 80011cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d9c4      	bls.n	800115e <motorRampa_init+0x166>
    osDelay(1);
 80011d4:	e716      	b.n	8001004 <motorRampa_init+0xc>
 80011d6:	bf00      	nop
 80011d8:	20000460 	.word	0x20000460
 80011dc:	20000464 	.word	0x20000464
 80011e0:	20000468 	.word	0x20000468
 80011e4:	0800a628 	.word	0x0800a628
 80011e8:	3f340000 	.word	0x3f340000
 80011ec:	42b40000 	.word	0x42b40000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40020800 	.word	0x40020800

080011f8 <lightShow_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lightShow_init */
void lightShow_init(void const * argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lightShow_init */
	uint16_t leds[8] = {0xF,0xE,0xC,0x8,0x0,0x1,0x3,0x7};
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <lightShow_init+0xc0>)
 8001202:	f107 040c 	add.w	r4, r7, #12
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t n = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f007 fa20 	bl	8008656 <osDelay>
	  delay_ms_soft(100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f7ff fb7e 	bl	8000918 <delay_ms_soft>
	  		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,leds[n] & 0x01);
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	3320      	adds	r3, #32
 8001222:	443b      	add	r3, r7
 8001224:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	2104      	movs	r1, #4
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <lightShow_init+0xc4>)
 8001236:	f000 fde3 	bl	8001e00 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,(leds[n] >> 1) & 0x01);
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3320      	adds	r3, #32
 8001240:	443b      	add	r3, r7
 8001242:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <lightShow_init+0xc4>)
 8001258:	f000 fdd2 	bl	8001e00 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,(leds[n] >> 2) & 0x01);
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	3320      	adds	r3, #32
 8001262:	443b      	add	r3, r7
 8001264:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	b29b      	uxth	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <lightShow_init+0xc8>)
 800127c:	f000 fdc0 	bl	8001e00 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,(leds[n] >> 3) & 0x01);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	3320      	adds	r3, #32
 8001286:	443b      	add	r3, r7
 8001288:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <lightShow_init+0xcc>)
 80012a0:	f000 fdae 	bl	8001e00 <HAL_GPIO_WritePin>
	  		n++;
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	3301      	adds	r3, #1
 80012a8:	77fb      	strb	r3, [r7, #31]
	  		if(n == 8)
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d1af      	bne.n	8001210 <lightShow_init+0x18>
	  			n = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
    osDelay(1);
 80012b4:	e7ac      	b.n	8001210 <lightShow_init+0x18>
 80012b6:	bf00      	nop
 80012b8:	0800a630 	.word	0x0800a630
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000

080012c8 <interfon_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interfon_init */
void interfon_init(void const * argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interfon_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f007 f9c0 	bl	8008656 <osDelay>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80012d6:	2101      	movs	r1, #1
 80012d8:	482f      	ldr	r0, [pc, #188]	; (8001398 <interfon_init+0xd0>)
 80012da:	f000 fd79 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <interfon_init+0x2c>
    	htim4.Instance->CCR2 = 20;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <interfon_init+0xd4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2214      	movs	r2, #20
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_Delay(2000);
 80012ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f0:	f000 facc 	bl	800188c <HAL_Delay>
    	}
    HAL_Delay(2000);
 80012f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f8:	f000 fac8 	bl	800188c <HAL_Delay>
    htim4.Instance->CCR2 = 0;
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <interfon_init+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
    if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)){
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	4825      	ldr	r0, [pc, #148]	; (80013a0 <interfon_init+0xd8>)
 800130a:	f000 fd61 	bl	8001dd0 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0dd      	beq.n	80012d0 <interfon_init+0x8>
    	float anglepersequence = 0.703125;
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <interfon_init+0xdc>)
 8001316:	613b      	str	r3, [r7, #16]
    		uint32_t angle_sequence = (int) (40 / anglepersequence);
 8001318:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013a8 <interfon_init+0xe0>
 800131c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	60fb      	str	r3, [r7, #12]
    		uint32_t temp_angle_sequence = angle_sequence;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	61fb      	str	r3, [r7, #28]
    		while (temp_angle_sequence) {
 8001332:	e011      	b.n	8001358 <interfon_init+0x90>
    			for (int step = 0; step < 8; step++) {
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	e008      	b.n	800134c <interfon_init+0x84>
    				stepper_half_drive_gate2(step);
 800133a:	69b8      	ldr	r0, [r7, #24]
 800133c:	f7ff fa18 	bl	8000770 <stepper_half_drive_gate2>
    				stepper_set_rpm(13);
 8001340:	200d      	movs	r0, #13
 8001342:	f7ff f917 	bl	8000574 <stepper_set_rpm>
    			for (int step = 0; step < 8; step++) {
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b07      	cmp	r3, #7
 8001350:	ddf3      	ble.n	800133a <interfon_init+0x72>
    			}
    			temp_angle_sequence--;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b01      	subs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
    		while (temp_angle_sequence) {
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ea      	bne.n	8001334 <interfon_init+0x6c>
    		}
    		HAL_Delay(10000);
 800135e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001362:	f000 fa93 	bl	800188c <HAL_Delay>
    		while (temp_angle_sequence <= angle_sequence) {
 8001366:	e011      	b.n	800138c <interfon_init+0xc4>
    			for (int step = 7; step >= 0; step--) {
 8001368:	2307      	movs	r3, #7
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e008      	b.n	8001380 <interfon_init+0xb8>
    				stepper_half_drive_gate2(step);
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff f9fe 	bl	8000770 <stepper_half_drive_gate2>
    				stepper_set_rpm(13);
 8001374:	200d      	movs	r0, #13
 8001376:	f7ff f8fd 	bl	8000574 <stepper_set_rpm>
    			for (int step = 7; step >= 0; step--) {
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3b01      	subs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	daf3      	bge.n	800136e <interfon_init+0xa6>
    			}
    			++temp_angle_sequence;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
    		while (temp_angle_sequence <= angle_sequence) {
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d9e9      	bls.n	8001368 <interfon_init+0xa0>
    osDelay(1);
 8001394:	e79c      	b.n	80012d0 <interfon_init+0x8>
 8001396:	bf00      	nop
 8001398:	40020000 	.word	0x40020000
 800139c:	20000400 	.word	0x20000400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	3f340000 	.word	0x3f340000
 80013a8:	42200000 	.word	0x42200000

080013ac <citacVrata_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_citacVrata_init */
void citacVrata_init(void const * argument)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN citacVrata_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f007 f94e 	bl	8008656 <osDelay>
    if(USBDataReady == 1 && (strncmp(Buffer,"Door\n",buflen)==0)){
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <citacVrata_init+0xc0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d1f8      	bne.n	80013b4 <citacVrata_init+0x8>
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <citacVrata_init+0xc4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <citacVrata_init+0xc8>)
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	492b      	ldr	r1, [pc, #172]	; (8001478 <citacVrata_init+0xcc>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f009 f897 	bl	800a500 <strncmp>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ed      	bne.n	80013b4 <citacVrata_init+0x8>
    	float anglepersequence = 0.703125;
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <citacVrata_init+0xd0>)
 80013da:	613b      	str	r3, [r7, #16]
    	uint32_t angle_sequence = (int) (90 / anglepersequence);
 80013dc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001480 <citacVrata_init+0xd4>
 80013e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ec:	ee17 3a90 	vmov	r3, s15
 80013f0:	60fb      	str	r3, [r7, #12]
    	uint32_t temp_angle_sequence = angle_sequence;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	61fb      	str	r3, [r7, #28]
    	while (temp_angle_sequence) {
 80013f6:	e011      	b.n	800141c <citacVrata_init+0x70>
    		for (int step = 0; step < 8; step++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	e008      	b.n	8001410 <citacVrata_init+0x64>
    			stepper_half_drive_gate2(step);
 80013fe:	69b8      	ldr	r0, [r7, #24]
 8001400:	f7ff f9b6 	bl	8000770 <stepper_half_drive_gate2>
    			stepper_set_rpm(13);
 8001404:	200d      	movs	r0, #13
 8001406:	f7ff f8b5 	bl	8000574 <stepper_set_rpm>
    		for (int step = 0; step < 8; step++) {
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b07      	cmp	r3, #7
 8001414:	ddf3      	ble.n	80013fe <citacVrata_init+0x52>
    		}
    		temp_angle_sequence--;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    	while (temp_angle_sequence) {
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ea      	bne.n	80013f8 <citacVrata_init+0x4c>
    	}
    	HAL_Delay(3000);
 8001422:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001426:	f000 fa31 	bl	800188c <HAL_Delay>
    	while (temp_angle_sequence <= angle_sequence) {
 800142a:	e011      	b.n	8001450 <citacVrata_init+0xa4>
    		for (int step = 7; step >= 0; step--) {
 800142c:	2307      	movs	r3, #7
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e008      	b.n	8001444 <citacVrata_init+0x98>
    			stepper_half_drive_gate2(step);
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff f99c 	bl	8000770 <stepper_half_drive_gate2>
    			stepper_set_rpm(13);
 8001438:	200d      	movs	r0, #13
 800143a:	f7ff f89b 	bl	8000574 <stepper_set_rpm>
    		for (int step = 7; step >= 0; step--) {
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3b01      	subs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	daf3      	bge.n	8001432 <citacVrata_init+0x86>
    		}
    		++temp_angle_sequence;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    	while (temp_angle_sequence <= angle_sequence) {
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d9e9      	bls.n	800142c <citacVrata_init+0x80>
    		}
    		HAL_Delay(3000);
    		}*/
    	}

    	USBDataReady = 0;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <citacVrata_init+0xc0>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
    	Buffer = 0;
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <citacVrata_init+0xc4>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    	buflen=0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <citacVrata_init+0xc8>)
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800146a:	e7a3      	b.n	80013b4 <citacVrata_init+0x8>
 800146c:	20000460 	.word	0x20000460
 8001470:	20000464 	.word	0x20000464
 8001474:	20000468 	.word	0x20000468
 8001478:	0800a640 	.word	0x0800a640
 800147c:	3f340000 	.word	0x3f340000
 8001480:	42b40000 	.word	0x42b40000

08001484 <displej_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displej_init */
void displej_init(void const * argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displej_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f007 f8e2 	bl	8008656 <osDelay>
 8001492:	e7fb      	b.n	800148c <displej_init+0x8>

08001494 <pomocni_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pomocni_init */
void pomocni_init(void const * argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pomocni_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f007 f8da 	bl	8008656 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <pomocni_init+0x28>)
 80014a8:	f000 fcaa 	bl	8001e00 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <pomocni_init+0x2c>)
 80014b4:	f000 fca4 	bl	8001e00 <HAL_GPIO_WritePin>
    osDelay(1);
 80014b8:	e7f0      	b.n	800149c <pomocni_init+0x8>
 80014ba:	bf00      	nop
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020800 	.word	0x40020800

080014c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014d6:	f000 f9b9 	bl	800184c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40010000 	.word	0x40010000

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_MspInit+0x54>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_MspInit+0x54>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x54>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_MspInit+0x54>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_MspInit+0x54>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_MspInit+0x54>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	210f      	movs	r1, #15
 8001536:	f06f 0001 	mvn.w	r0, #1
 800153a:	f000 fa83 	bl	8001a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d10e      	bne.n	800157c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800157a:	e026      	b.n	80015ca <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10e      	bne.n	80015a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
}
 80015a2:	e012      	b.n	80015ca <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_TIM_Base_MspInit+0x94>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10d      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
}
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40000800 	.word	0x40000800

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d11e      	bne.n	8001644 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_TIM_MspPostInit+0x70>)
 8001640:	f000 fa2a 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40000800 	.word	0x40000800
 8001650:	40023800 	.word	0x40023800
 8001654:	40020c00 	.word	0x40020c00

08001658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_InitTick+0xd0>)
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	4a2d      	ldr	r2, [pc, #180]	; (8001728 <HAL_InitTick+0xd0>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6453      	str	r3, [r2, #68]	; 0x44
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_InitTick+0xd0>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001684:	f107 020c 	add.w	r2, r7, #12
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fad0 	bl	8003c34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001694:	f002 faba 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8001698:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_InitTick+0xd4>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	3b01      	subs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_InitTick+0xd8>)
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_InitTick+0xdc>)
 80016ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_InitTick+0xd8>)
 80016b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_InitTick+0xd8>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_InitTick+0xd8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_InitTick+0xd8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_InitTick+0xd8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <HAL_InitTick+0xd8>)
 80016d0:	f002 fae2 	bl	8003c98 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d11b      	bne.n	800171a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016e2:	4813      	ldr	r0, [pc, #76]	; (8001730 <HAL_InitTick+0xd8>)
 80016e4:	f002 fb90 	bl	8003e08 <HAL_TIM_Base_Start_IT>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d111      	bne.n	800171a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016f6:	2019      	movs	r0, #25
 80016f8:	f000 f9c0 	bl	8001a7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d808      	bhi.n	8001714 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001702:	2200      	movs	r2, #0
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	2019      	movs	r0, #25
 8001708:	f000 f99c 	bl	8001a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_InitTick+0xe0>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e002      	b.n	800171a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800171a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800171e:	4618      	mov	r0, r3
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	431bde83 	.word	0x431bde83
 8001730:	2000046c 	.word	0x2000046c
 8001734:	40010000 	.word	0x40010000
 8001738:	20000004 	.word	0x20000004

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800176e:	f002 fcdd 	bl	800412c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000046c 	.word	0x2000046c

0800177c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <OTG_FS_IRQHandler+0x10>)
 8001782:	f000 fca6 	bl	80020d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200056f4 	.word	0x200056f4

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ba:	490e      	ldr	r1, [pc, #56]	; (80017f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d0:	4c0b      	ldr	r4, [pc, #44]	; (8001800 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017de:	f7ff ffd7 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f008 fe61 	bl	800a4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff f8af 	bl	8000948 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80017f8:	0800a6c0 	.word	0x0800a6c0
  ldr r2, =_sbss
 80017fc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001800:	20005e20 	.word	0x20005e20

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f8fc 	bl	8001a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f7ff ff0e 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fe5a 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	200004b4 	.word	0x200004b4

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200004b4 	.word	0x200004b4

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff4c 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a56:	f7ff ff61 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	f7ff ffb1 	bl	80019c8 <NVIC_EncodePriority>
 8001a66:	4602      	mov	r2, r0
 8001a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff80 	bl	8001974 <__NVIC_SetPriority>
}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff54 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e16b      	b.n	8001d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 815a 	bne.w	8001d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d005      	beq.n	8001aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d017      	beq.n	8001b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d123      	bne.n	8001bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80b4 	beq.w	8001d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <HAL_GPIO_Init+0x310>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x314>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x318>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x31c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x216>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4d      	ldr	r2, [pc, #308]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x212>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4c      	ldr	r2, [pc, #304]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x20a>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00e      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	; (8001da8 <HAL_GPIO_Init+0x310>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae90 	bls.w	8001ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e34:	b08f      	sub	sp, #60	; 0x3c
 8001e36:	af0a      	add	r7, sp, #40	; 0x28
 8001e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e10f      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f008 f800 	bl	8009e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f8c1 	bl	800500a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	687e      	ldr	r6, [r7, #4]
 8001e90:	466d      	mov	r5, sp
 8001e92:	f106 0410 	add.w	r4, r6, #16
 8001e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea6:	1d33      	adds	r3, r6, #4
 8001ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f002 ff98 	bl	8004de0 <USB_CoreInit>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0d0      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f8af 	bl	800502c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e04a      	b.n	8001f6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333d      	adds	r3, #61	; 0x3d
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	333c      	adds	r3, #60	; 0x3c
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	b298      	uxth	r0, r3
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3344      	adds	r3, #68	; 0x44
 8001f10:	4602      	mov	r2, r0
 8001f12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3340      	adds	r3, #64	; 0x40
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3348      	adds	r3, #72	; 0x48
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334c      	adds	r3, #76	; 0x4c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3354      	adds	r3, #84	; 0x54
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3af      	bcc.n	8001ed4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e044      	b.n	8002004 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3301      	adds	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d3b5      	bcc.n	8001f7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	687e      	ldr	r6, [r7, #4]
 8002016:	466d      	mov	r5, sp
 8002018:	f106 0410 	add.w	r4, r6, #16
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002028:	e885 0003 	stmia.w	r5, {r0, r1}
 800202c:	1d33      	adds	r3, r6, #4
 800202e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f003 f847 	bl	80050c4 <USB_DevInit>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00d      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 f996 	bl	800638e <USB_DevDisconnect>

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800206c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_Start+0x1c>
 8002084:	2302      	movs	r3, #2
 8002086:	e020      	b.n	80020ca <HAL_PCD_Start+0x5e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b01      	cmp	r3, #1
 8002096:	d109      	bne.n	80020ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 ff99 	bl	8004fe8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 f946 	bl	800634c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020d2:	b590      	push	{r4, r7, lr}
 80020d4:	b08d      	sub	sp, #52	; 0x34
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fa04 	bl	80064f6 <USB_GetMode>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 848a 	bne.w	8002a0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f968 	bl	80063d0 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8480 	beq.w	8002a08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 f955 	bl	80063d0 <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d107      	bne.n	8002140 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f002 0202 	and.w	r2, r2, #2
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f943 	bl	80063d0 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	d161      	bne.n	8002218 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0210 	bic.w	r2, r2, #16
 8002162:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	0c5b      	lsrs	r3, r3, #17
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b02      	cmp	r3, #2
 800218e:	d124      	bne.n	80021da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d035      	beq.n	8002208 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6a38      	ldr	r0, [r7, #32]
 80021b0:	f003 ff7a 	bl	80060a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c0:	441a      	add	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d2:	441a      	add	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	e016      	b.n	8002208 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	0c5b      	lsrs	r3, r3, #17
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d110      	bne.n	8002208 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ec:	2208      	movs	r2, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	6a38      	ldr	r0, [r7, #32]
 80021f2:	f003 ff59 	bl	80060a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002202:	441a      	add	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0210 	orr.w	r2, r2, #16
 8002216:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f004 f8d7 	bl	80063d0 <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800222c:	f040 80a7 	bne.w	800237e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f8dc 	bl	80063f6 <USB_ReadDevAllOutEpInterrupt>
 800223e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002240:	e099      	b.n	8002376 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 808e 	beq.w	800236a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f004 f900 	bl	800645e <USB_ReadDevOutEPInterrupt>
 800225e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800227c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fec2 	bl	8003008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2308      	movs	r3, #8
 800229e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 ff98 	bl	80031d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d030      	beq.n	8002330 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d109      	bne.n	80022ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	3304      	adds	r3, #4
 8002302:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d108      	bne.n	800231e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f007 feb7 	bl	800a08c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2302      	movs	r3, #2
 800232e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	2320      	movs	r3, #32
 800234a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002368:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f af62 	bne.w	8002242 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f824 	bl	80063d0 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002392:	f040 80db 	bne.w	800254c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f004 f845 	bl	800642a <USB_ReadDevAllInEpInterrupt>
 80023a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023a6:	e0cd      	b.n	8002544 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80c2 	beq.w	8002538 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f86b 	bl	800649a <USB_ReadDevInEPInterrupt>
 80023c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d057      	beq.n	8002480 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69f9      	ldr	r1, [r7, #28]
 80023ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023f0:	4013      	ands	r3, r2
 80023f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d132      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334c      	adds	r3, #76	; 0x4c
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4403      	add	r3, r0
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4419      	add	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	334c      	adds	r3, #76	; 0x4c
 8002444:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3354      	adds	r3, #84	; 0x54
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f004 f872 	bl	8006558 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f007 fd81 	bl	8009f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2308      	movs	r3, #8
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2310      	movs	r3, #16
 80024b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ce:	461a      	mov	r2, r3
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d023      	beq.n	8002526 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e0:	6a38      	ldr	r0, [r7, #32]
 80024e2:	f002 ff53 	bl	800538c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3338      	adds	r3, #56	; 0x38
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	78db      	ldrb	r3, [r3, #3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f007 fdce 	bl	800a0b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	461a      	mov	r2, r3
 8002522:	2302      	movs	r3, #2
 8002524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fcdb 	bl	8002eee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f af2e 	bne.w	80023a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 ff3d 	bl	80063d0 <USB_ReadInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800255c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002560:	d122      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fec2 	bl	8003314 <HAL_PCDEx_LPM_Callback>
 8002590:	e002      	b.n	8002598 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f007 fd6c 	bl	800a070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 ff0f 	bl	80063d0 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025bc:	d112      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f007 fd28 	bl	800a024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fef1 	bl	80063d0 <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	f040 80b7 	bne.w	800276a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2110      	movs	r1, #16
 8002616:	4618      	mov	r0, r3
 8002618:	f002 feb8 	bl	800538c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	e046      	b.n	80026b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262e:	461a      	mov	r2, r3
 8002630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002634:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	440a      	add	r2, r1
 800264c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002654:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	461a      	mov	r2, r3
 8002664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002668:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	440a      	add	r2, r1
 8002680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3301      	adds	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3b3      	bcc.n	8002622 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f043 030b 	orr.w	r3, r3, #11
 80026ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f043 030b 	orr.w	r3, r3, #11
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	e015      	b.n	8002730 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002716:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800271a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f043 030b 	orr.w	r3, r3, #11
 800272e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002742:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002754:	461a      	mov	r2, r3
 8002756:	f003 feff 	bl	8006558 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fe2e 	bl	80063d0 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d124      	bne.n	80027ca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fec4 	bl	8006512 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fe79 	bl	8005486 <USB_GetDevSpeed>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	f001 fa28 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4620      	mov	r0, r4
 80027b0:	f002 fb78 	bl	8004ea4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f007 fc0c 	bl	8009fd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fdfe 	bl	80063d0 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d10a      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f007 fbe9 	bl	8009fb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f002 0208 	and.w	r2, r2, #8
 80027f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fde9 	bl	80063d0 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d122      	bne.n	800284e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e014      	b.n	8002844 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fb27 	bl	8002e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	d3e5      	bcc.n	800281a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fdbc 	bl	80063d0 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d13b      	bne.n	80028dc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	e02b      	b.n	80028c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3340      	adds	r3, #64	; 0x40
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d115      	bne.n	80028bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	da12      	bge.n	80028bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	333f      	adds	r3, #63	; 0x3f
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fae8 	bl	8002e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3ce      	bcc.n	800286a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fd75 	bl	80063d0 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f0:	d155      	bne.n	800299e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f2:	2301      	movs	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e045      	b.n	8002984 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d12e      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002920:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	da2b      	bge.n	800297e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002932:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002936:	429a      	cmp	r2, r3
 8002938:	d121      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6053      	str	r3, [r2, #4]
            break;
 800297c:	e007      	b.n	800298e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3301      	adds	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	429a      	cmp	r2, r3
 800298c:	d3b4      	bcc.n	80028f8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800299c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fd14 	bl	80063d0 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f007 fb8d 	bl	800a0d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fcfe 	bl	80063d0 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d115      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f007 fb7d 	bl	800a0f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e000      	b.n	8002a0a <HAL_PCD_IRQHandler+0x938>
      return;
 8002a08:	bf00      	nop
    }
  }
}
 8002a0a:	3734      	adds	r7, #52	; 0x34
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_SetAddress+0x1a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e013      	b.n	8002a52 <HAL_PCD_SetAddress+0x42>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fc5c 	bl	8006300 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	4608      	mov	r0, r1
 8002a64:	4611      	mov	r1, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	70fb      	strb	r3, [r7, #3]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	803b      	strh	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da0f      	bge.n	8002aa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	705a      	strb	r2, [r3, #1]
 8002a9e:	e00f      	b.n	8002ac0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002acc:	883a      	ldrh	r2, [r7, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	78ba      	ldrb	r2, [r7, #2]
 8002ad6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aea:	78bb      	ldrb	r3, [r7, #2]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d102      	bne.n	8002af6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_PCD_EP_Open+0xaa>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e00e      	b.n	8002b22 <HAL_PCD_EP_Open+0xc8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fcdc 	bl	80054d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b20:	7afb      	ldrb	r3, [r7, #11]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0f      	bge.n	8002b5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	705a      	strb	r2, [r3, #1]
 8002b5c:	e00f      	b.n	8002b7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_EP_Close+0x6e>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e00e      	b.n	8002bb6 <HAL_PCD_EP_Close+0x8c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fd1a 	bl	80055e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6979      	ldr	r1, [r7, #20]
 8002c32:	f002 fff9 	bl	8005c28 <USB_EP0StartXfer>
 8002c36:	e008      	b.n	8002c4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	f002 fda7 	bl	8005798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3338      	adds	r3, #56	; 0x38
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6979      	ldr	r1, [r7, #20]
 8002cf6:	f002 ff97 	bl	8005c28 <USB_EP0StartXfer>
 8002cfa:	e008      	b.n	8002d0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	f002 fd45 	bl	8005798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d901      	bls.n	8002d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e050      	b.n	8002dd8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da0f      	bge.n	8002d5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	3338      	adds	r3, #56	; 0x38
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	705a      	strb	r2, [r3, #1]
 8002d5c:	e00d      	b.n	8002d7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_PCD_EP_SetStall+0x82>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e01e      	b.n	8002dd8 <HAL_PCD_EP_SetStall+0xc0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 f9d5 	bl	8006158 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	b2d9      	uxtb	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f003 fbc5 	bl	8006558 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d901      	bls.n	8002dfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da0f      	bge.n	8002e26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3338      	adds	r3, #56	; 0x38
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	705a      	strb	r2, [r3, #1]
 8002e24:	e00f      	b.n	8002e46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	f003 020f 	and.w	r2, r3, #15
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_PCD_EP_ClrStall+0x86>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e00e      	b.n	8002e84 <HAL_PCD_EP_ClrStall+0xa4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f9dd 	bl	8006234 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da0c      	bge.n	8002eba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3338      	adds	r3, #56	; 0x38
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e00c      	b.n	8002ed4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fffc 	bl	8005ed8 <USB_EPStopXfer>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3338      	adds	r3, #56	; 0x38
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d901      	bls.n	8002f26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06c      	b.n	8003000 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d902      	bls.n	8002f42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3303      	adds	r3, #3
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f4a:	e02b      	b.n	8002fa4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d902      	bls.n	8002f68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3303      	adds	r3, #3
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f003 f850 	bl	800602c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	441a      	add	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d809      	bhi.n	8002fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d203      	bcs.n	8002fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1be      	bne.n	8002f4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d811      	bhi.n	8002ffe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	333c      	adds	r3, #60	; 0x3c
 8003020:	3304      	adds	r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d17b      	bne.n	8003136 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4a61      	ldr	r2, [pc, #388]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f240 80b9 	bls.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80b3 	beq.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003070:	6093      	str	r3, [r2, #8]
 8003072:	e0a7      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	2320      	movs	r3, #32
 800308e:	6093      	str	r3, [r2, #8]
 8003090:	e098      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 8093 	bne.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d90f      	bls.n	80030c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	e07e      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d114      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003110:	461a      	mov	r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	f003 fa20 	bl	8006558 <USB_EP0_OutStart>
 8003118:	e006      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	441a      	add	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f006 ff0c 	bl	8009f4c <HAL_PCD_DataOutStageCallback>
 8003134:	e046      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d124      	bne.n	8003188 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315a:	6093      	str	r3, [r2, #8]
 800315c:	e032      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	2320      	movs	r3, #32
 8003178:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f006 fee3 	bl	8009f4c <HAL_PCD_DataOutStageCallback>
 8003186:	e01d      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031b0:	461a      	mov	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f003 f9d0 	bl	8006558 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 fec4 	bl	8009f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	4f54300a 	.word	0x4f54300a
 80031d4:	4f54310a 	.word	0x4f54310a

080031d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	333c      	adds	r3, #60	; 0x3c
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90e      	bls.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f006 fe7b 	bl	8009f28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90c      	bls.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800324c:	461a      	mov	r2, r3
 800324e:	2101      	movs	r1, #1
 8003250:	f003 f982 	bl	8006558 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54300a 	.word	0x4f54300a

08003264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	4613      	mov	r3, r2
 8003272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003282:	883b      	ldrh	r3, [r7, #0]
 8003284:	0419      	lsls	r1, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	430a      	orrs	r2, r1
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	e028      	b.n	80032e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e00d      	b.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3ec      	bcc.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032cc:	883b      	ldrh	r3, [r7, #0]
 80032ce:	0418      	lsls	r0, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4302      	orrs	r2, r0
 80032dc:	3340      	adds	r3, #64	; 0x40
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e267      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e242      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6c      	ldr	r2, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fa46 	bl	8001874 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fa42 	bl	8001874 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e207      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fa32 	bl	8001874 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fa2e 	bl	8001874 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1f3      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c7      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe f9e7 	bl	8001874 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe f9e3 	bl	8001874 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a8      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4925      	ldr	r1, [pc, #148]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe f9c6 	bl	8001874 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe f9c2 	bl	8001874 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e187      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d036      	beq.n	8003584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe f9a6 	bl	8001874 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe f9a2 	bl	8001874 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e167      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
 800354a:	e01b      	b.n	8003584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe f98f 	bl	8001874 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00e      	b.n	8003578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe f98b 	bl	8001874 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d907      	bls.n	8003578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e150      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	42470000 	.word	0x42470000
 8003574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ea      	bne.n	800355a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8097 	beq.w	80036c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fe f94b 	bl	8001874 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe f947 	bl	8001874 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e10c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x2ea>
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	e01c      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x30c>
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5e      	ldr	r2, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a57      	ldr	r2, [pc, #348]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	4b55      	ldr	r3, [pc, #340]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe f90c 	bl	8001874 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe f908 	bl	8001874 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0cb      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCC_OscConfig+0x334>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7fe f8f6 	bl	8001874 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fe f8f2 	bl	8001874 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0b5      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ee      	bne.n	800368c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4a38      	ldr	r2, [pc, #224]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a1 	beq.w	800380c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d05c      	beq.n	8003790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d141      	bne.n	8003762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f8c6 	bl	8001874 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe f8c2 	bl	8001874 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	491b      	ldr	r1, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe f89b 	bl	8001874 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe f897 	bl	8001874 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e05c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x416>
 8003760:	e054      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe f884 	bl	8001874 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe f880 	bl	8001874 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e045      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x444>
 800378e:	e03d      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e038      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11a      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cc      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90c      	bls.n	8003858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d044      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e067      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fd ffb2 	bl	8001874 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fd ffae 	bl	8001874 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d20c      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fe48 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800a698 	.word	0x0800a698
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b094      	sub	sp, #80	; 0x50
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	2300      	movs	r3, #0
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b79      	ldr	r3, [pc, #484]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80e1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e0db      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a20:	e0db      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a26:	e0d8      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4621      	mov	r1, r4
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	6139      	str	r1, [r7, #16]
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4651      	mov	r1, sl
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	eb49 0303 	adc.w	r3, r9, r3
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ada:	4629      	mov	r1, r5
 8003adc:	024b      	lsls	r3, r1, #9
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	024a      	lsls	r2, r1, #9
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	f7fc fb6a 	bl	80001d0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	e058      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4611      	mov	r1, r2
 8003b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b32:	0150      	lsls	r0, r2, #5
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b58:	ebb2 040a 	subs.w	r4, r2, sl
 8003b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	00eb      	lsls	r3, r5, #3
 8003b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	4614      	mov	r4, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	4643      	mov	r3, r8
 8003b76:	18e3      	adds	r3, r4, r3
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	eb45 0303 	adc.w	r3, r5, r3
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	61fa      	str	r2, [r7, #28]
 8003ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bac:	f7fc fb10 	bl	80001d0 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3750      	adds	r7, #80	; 0x50
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0b5b      	lsrs	r3, r3, #13
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	0800a6a8 	.word	0x0800a6a8

08003c34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	220f      	movs	r2, #15
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_RCC_GetClockConfig+0x60>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0207 	and.w	r2, r3, #7
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40023c00 	.word	0x40023c00

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fc44 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fce2 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e046      	b.n	8003dde <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_TIM_Base_Start+0xb4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d01d      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_TIM_Base_Start+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_TIM_Base_Start+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_Base_Start+0xc0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_TIM_Base_Start+0xc4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_Base_Start+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start+0x70>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_TIM_Base_Start+0xcc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d010      	beq.n	8003ddc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40001800 	.word	0x40001800

08003e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d001      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e04e      	b.n	8003ebe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d01d      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x80>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d010      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e007      	b.n	8003ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40010400 	.word	0x40010400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40001800 	.word	0x40001800

08003ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e041      	b.n	8003f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f839 	bl	8003f86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fbba 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start+0x24>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start+0x3e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07c      	b.n	8004108 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0x82>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	e013      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0x92>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	e00b      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	e003      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fe10 	bl	8004c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2d      	ldr	r2, [pc, #180]	; (8004110 <HAL_TIM_PWM_Start+0x174>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_PWM_Start+0xcc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <HAL_TIM_PWM_Start+0x178>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_TIM_PWM_Start+0xd0>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_TIM_PWM_Start+0xd2>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_TIM_PWM_Start+0x174>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d01d      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_TIM_PWM_Start+0x17c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_TIM_PWM_Start+0x180>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_TIM_PWM_Start+0x184>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_TIM_PWM_Start+0x178>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_TIM_PWM_Start+0x188>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_TIM_PWM_Start+0x18c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d010      	beq.n	8004106 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f4:	e007      	b.n	8004106 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40010000 	.word	0x40010000
 8004114:	40010400 	.word	0x40010400
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40001800 	.word	0x40001800

0800412c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa77 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa69 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa7a 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0204 	mvn.w	r2, #4
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa4d 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa3f 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fa50 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0208 	mvn.w	r2, #8
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa23 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa15 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fa26 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0210 	mvn.w	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9f9 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9eb 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9fc 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0201 	mvn.w	r2, #1
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f90a 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fd78 	bl	8004dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9c1 	bl	800468a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b20      	cmp	r3, #32
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b20      	cmp	r3, #32
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0220 	mvn.w	r2, #32
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fd42 	bl	8004db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004356:	2302      	movs	r3, #2
 8004358:	e0ae      	b.n	80044b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	f200 809f 	bhi.w	80044a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080044a9 	.word	0x080044a9
 8004378:	080044a9 	.word	0x080044a9
 800437c:	080044a9 	.word	0x080044a9
 8004380:	080043e5 	.word	0x080043e5
 8004384:	080044a9 	.word	0x080044a9
 8004388:	080044a9 	.word	0x080044a9
 800438c:	080044a9 	.word	0x080044a9
 8004390:	08004427 	.word	0x08004427
 8004394:	080044a9 	.word	0x080044a9
 8004398:	080044a9 	.word	0x080044a9
 800439c:	080044a9 	.word	0x080044a9
 80043a0:	08004467 	.word	0x08004467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fa18 	bl	80047e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6999      	ldr	r1, [r3, #24]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
      break;
 80043e2:	e064      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa68 	bl	80048c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	021a      	lsls	r2, r3, #8
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
      break;
 8004424:	e043      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fabd 	bl	80049ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0204 	bic.w	r2, r2, #4
 8004450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69d9      	ldr	r1, [r3, #28]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	61da      	str	r2, [r3, #28]
      break;
 8004464:	e023      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fb11 	bl	8004a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	021a      	lsls	r2, r3, #8
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	61da      	str	r2, [r3, #28]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_ConfigClockSource+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0b4      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x186>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xd4>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	f000 8086 	beq.w	8004632 <HAL_TIM_ConfigClockSource+0x172>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xa6>
 8004530:	2b70      	cmp	r3, #112	; 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x11a>
 8004538:	2b60      	cmp	r3, #96	; 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b50      	cmp	r3, #80	; 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xfa>
 8004540:	2b50      	cmp	r3, #80	; 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x13a>
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f000 fb5d 	bl	8004c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04f      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f000 fb46 	bl	8004c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 faba 	bl	8004b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	; 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb13 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fad9 	bl	8004b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	; 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb03 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fa9a 	bl	8004b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 faf3 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 8004618:	e00c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 faea 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 800462a:	e003      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	; (80047b8 <TIM_Base_SetConfig+0x118>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3c      	ldr	r2, [pc, #240]	; (80047bc <TIM_Base_SetConfig+0x11c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <TIM_Base_SetConfig+0x120>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d027      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <TIM_Base_SetConfig+0x118>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d023      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <TIM_Base_SetConfig+0x11c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01f      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <TIM_Base_SetConfig+0x120>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d017      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <TIM_Base_SetConfig+0x128>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <TIM_Base_SetConfig+0x12c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <TIM_Base_SetConfig+0x130>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a25      	ldr	r2, [pc, #148]	; (80047d4 <TIM_Base_SetConfig+0x134>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <TIM_Base_SetConfig+0x138>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a23      	ldr	r2, [pc, #140]	; (80047dc <TIM_Base_SetConfig+0x13c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d108      	bne.n	8004764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0xf8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	615a      	str	r2, [r3, #20]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40001800 	.word	0x40001800
 80047d8:	40001c00 	.word	0x40001c00
 80047dc:	40002000 	.word	0x40002000

080047e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 0302 	bic.w	r3, r3, #2
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <TIM_OC1_SetConfig+0xd8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC1_SetConfig+0x64>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <TIM_OC1_SetConfig+0xdc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10c      	bne.n	800485e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0308 	bic.w	r3, r3, #8
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <TIM_OC1_SetConfig+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC1_SetConfig+0x8e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <TIM_OC1_SetConfig+0xdc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d111      	bne.n	8004892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40010400 	.word	0x40010400

080048c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0210 	bic.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0320 	bic.w	r3, r3, #32
 800490a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <TIM_OC2_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC2_SetConfig+0x68>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <TIM_OC2_SetConfig+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10d      	bne.n	8004944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <TIM_OC2_SetConfig+0xe4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC2_SetConfig+0x94>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <TIM_OC2_SetConfig+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d113      	bne.n	800497c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <TIM_OC3_SetConfig+0xe0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0x66>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <TIM_OC3_SetConfig+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10d      	bne.n	8004a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <TIM_OC3_SetConfig+0xe0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC3_SetConfig+0x92>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <TIM_OC3_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40010400 	.word	0x40010400

08004a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <TIM_OC4_SetConfig+0xa4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC4_SetConfig+0x68>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <TIM_OC4_SetConfig+0xa8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400

08004b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0201 	bic.w	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 030a 	bic.w	r3, r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0210 	bic.w	r2, r3, #16
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	031b      	lsls	r3, r3, #12
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f043 0307 	orr.w	r3, r3, #7
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2201      	movs	r2, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e05a      	b.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d24:	d01d      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10c      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40010400 	.word	0x40010400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40001800 	.word	0x40001800

08004db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 001c 	add.w	r0, r7, #28
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fbee 	bl	8006614 <USB_CoreReset>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e01a      	b.n	8004e74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 fbe2 	bl	8006614 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
 8004e66:	e005      	b.n	8004e74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10b      	bne.n	8004e92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f043 0206 	orr.w	r2, r3, #6
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9e:	b004      	add	sp, #16
 8004ea0:	4770      	bx	lr
	...

08004ea4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d165      	bne.n	8004f84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a41      	ldr	r2, [pc, #260]	; (8004fc0 <USB_SetTurnaroundTime+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0x2a>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a40      	ldr	r2, [pc, #256]	; (8004fc4 <USB_SetTurnaroundTime+0x120>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ec8:	230f      	movs	r3, #15
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e062      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a3c      	ldr	r2, [pc, #240]	; (8004fc4 <USB_SetTurnaroundTime+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d306      	bcc.n	8004ee4 <USB_SetTurnaroundTime+0x40>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a3b      	ldr	r2, [pc, #236]	; (8004fc8 <USB_SetTurnaroundTime+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d202      	bcs.n	8004ee4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ede:	230e      	movs	r3, #14
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e057      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	; (8004fc8 <USB_SetTurnaroundTime+0x124>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d306      	bcc.n	8004efa <USB_SetTurnaroundTime+0x56>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a37      	ldr	r2, [pc, #220]	; (8004fcc <USB_SetTurnaroundTime+0x128>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d202      	bcs.n	8004efa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ef4:	230d      	movs	r3, #13
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e04c      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <USB_SetTurnaroundTime+0x128>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d306      	bcc.n	8004f10 <USB_SetTurnaroundTime+0x6c>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <USB_SetTurnaroundTime+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d802      	bhi.n	8004f10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e041      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <USB_SetTurnaroundTime+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d906      	bls.n	8004f26 <USB_SetTurnaroundTime+0x82>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <USB_SetTurnaroundTime+0x130>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d802      	bhi.n	8004f26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f20:	230b      	movs	r3, #11
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e036      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <USB_SetTurnaroundTime+0x130>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d906      	bls.n	8004f3c <USB_SetTurnaroundTime+0x98>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <USB_SetTurnaroundTime+0x134>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d802      	bhi.n	8004f3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f36:	230a      	movs	r3, #10
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e02b      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <USB_SetTurnaroundTime+0x134>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d906      	bls.n	8004f52 <USB_SetTurnaroundTime+0xae>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <USB_SetTurnaroundTime+0x138>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d202      	bcs.n	8004f52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f4c:	2309      	movs	r3, #9
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e020      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <USB_SetTurnaroundTime+0x138>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d306      	bcc.n	8004f68 <USB_SetTurnaroundTime+0xc4>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <USB_SetTurnaroundTime+0x13c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d802      	bhi.n	8004f68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f62:	2308      	movs	r3, #8
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e015      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <USB_SetTurnaroundTime+0x13c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d906      	bls.n	8004f7e <USB_SetTurnaroundTime+0xda>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <USB_SetTurnaroundTime+0x140>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d202      	bcs.n	8004f7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f78:	2307      	movs	r3, #7
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e00a      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f7e:	2306      	movs	r3, #6
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e007      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f8a:	2309      	movs	r3, #9
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e001      	b.n	8004f94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f90:	2309      	movs	r3, #9
 8004f92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fac:	431a      	orrs	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	00d8acbf 	.word	0x00d8acbf
 8004fc4:	00e4e1c0 	.word	0x00e4e1c0
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	01067380 	.word	0x01067380
 8004fd0:	011a499f 	.word	0x011a499f
 8004fd4:	01312cff 	.word	0x01312cff
 8004fd8:	014ca43f 	.word	0x014ca43f
 8004fdc:	016e3600 	.word	0x016e3600
 8004fe0:	01a6ab1f 	.word	0x01a6ab1f
 8004fe4:	01e84800 	.word	0x01e84800

08004fe8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f043 0201 	orr.w	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d115      	bne.n	800507a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800505a:	2001      	movs	r0, #1
 800505c:	f7fc fc16 	bl	800188c <HAL_Delay>
      ms++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 fa45 	bl	80064f6 <USB_GetMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d01e      	beq.n	80050b0 <USB_SetCurrentMode+0x84>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b31      	cmp	r3, #49	; 0x31
 8005076:	d9f0      	bls.n	800505a <USB_SetCurrentMode+0x2e>
 8005078:	e01a      	b.n	80050b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d115      	bne.n	80050ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800508c:	2001      	movs	r0, #1
 800508e:	f7fc fbfd 	bl	800188c <HAL_Delay>
      ms++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fa2c 	bl	80064f6 <USB_GetMode>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <USB_SetCurrentMode+0x84>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b31      	cmp	r3, #49	; 0x31
 80050a8:	d9f0      	bls.n	800508c <USB_SetCurrentMode+0x60>
 80050aa:	e001      	b.n	80050b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e005      	b.n	80050bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b32      	cmp	r3, #50	; 0x32
 80050b4:	d101      	bne.n	80050ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c4:	b084      	sub	sp, #16
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b086      	sub	sp, #24
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e009      	b.n	80050f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3340      	adds	r3, #64	; 0x40
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3301      	adds	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0e      	cmp	r3, #14
 80050fc:	d9f2      	bls.n	80050e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11c      	bne.n	800513e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005112:	f043 0302 	orr.w	r3, r3, #2
 8005116:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
 800513c:	e00b      	b.n	8005156 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	4619      	mov	r1, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	461a      	mov	r2, r3
 8005172:	680b      	ldr	r3, [r1, #0]
 8005174:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10c      	bne.n	8005196 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005182:	2100      	movs	r1, #0
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f965 	bl	8005454 <USB_SetDevSpeed>
 800518a:	e008      	b.n	800519e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800518c:	2101      	movs	r1, #1
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f960 	bl	8005454 <USB_SetDevSpeed>
 8005194:	e003      	b.n	800519e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005196:	2103      	movs	r1, #3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f95b 	bl	8005454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800519e:	2110      	movs	r1, #16
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8f3 	bl	800538c <USB_FlushTxFifo>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f91f 	bl	80053f4 <USB_FlushRxFifo>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	461a      	mov	r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e043      	b.n	8005272 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005200:	d118      	bne.n	8005234 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	461a      	mov	r2, r3
 8005216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e013      	b.n	8005246 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	461a      	mov	r2, r3
 800522c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e008      	b.n	8005246 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	461a      	mov	r2, r3
 8005242:	2300      	movs	r3, #0
 8005244:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	461a      	mov	r2, r3
 8005266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800526a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	3301      	adds	r3, #1
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3b7      	bcc.n	80051ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e043      	b.n	8005308 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	d118      	bne.n	80052ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	461a      	mov	r2, r3
 80052ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	e013      	b.n	80052dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	461a      	mov	r2, r3
 80052c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e008      	b.n	80052dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005300:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3301      	adds	r3, #1
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	429a      	cmp	r2, r3
 800530e:	d3b7      	bcc.n	8005280 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005322:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005330:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f043 0210 	orr.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <USB_DevInit+0x2c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f043 0208 	orr.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005384:	b004      	add	sp, #16
 8005386:	4770      	bx	lr
 8005388:	803c3800 	.word	0x803c3800

0800538c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <USB_FlushTxFifo+0x64>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e01b      	b.n	80053e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	daf2      	bge.n	800539a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	019b      	lsls	r3, r3, #6
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <USB_FlushTxFifo+0x64>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e006      	b.n	80053e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d0f0      	beq.n	80053c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	00030d40 	.word	0x00030d40

080053f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <USB_FlushRxFifo+0x5c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e018      	b.n	8005444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	daf2      	bge.n	8005400 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2210      	movs	r2, #16
 8005422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <USB_FlushRxFifo+0x5c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e006      	b.n	8005444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b10      	cmp	r3, #16
 8005440:	d0f0      	beq.n	8005424 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	00030d40 	.word	0x00030d40

08005454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	68f9      	ldr	r1, [r7, #12]
 8005470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]
 80054aa:	e00a      	b.n	80054c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d002      	beq.n	80054b8 <USB_GetDevSpeed+0x32>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	d102      	bne.n	80054be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054b8:	2302      	movs	r3, #2
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e001      	b.n	80054c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054be:	230f      	movs	r3, #15
 80054c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d13a      	bne.n	8005562 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	b29b      	uxth	r3, r3
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800550a:	4313      	orrs	r3, r2
 800550c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d155      	bne.n	80055d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	791b      	ldrb	r3, [r3, #4]
 800553e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005540:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	059b      	lsls	r3, r3, #22
 8005546:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005548:	4313      	orrs	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	e036      	b.n	80055d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005580:	4313      	orrs	r3, r2
 8005582:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11a      	bne.n	80055d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	791b      	ldrb	r3, [r3, #4]
 80055b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055b6:	430b      	orrs	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
	...

080055e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d161      	bne.n	80056c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005612:	d11f      	bne.n	8005654 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005632:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005652:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	b29b      	uxth	r3, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4013      	ands	r3, r2
 8005676:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	b29b      	uxth	r3, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005698:	4013      	ands	r3, r2
 800569a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	0159      	lsls	r1, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	440b      	add	r3, r1
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	4619      	mov	r1, r3
 80056b8:	4b35      	ldr	r3, [pc, #212]	; (8005790 <USB_DeactivateEndpoint+0x1b0>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
 80056be:	e060      	b.n	8005782 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d6:	d11f      	bne.n	8005718 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	43db      	mvns	r3, r3
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4013      	ands	r3, r2
 800573a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	2101      	movs	r1, #1
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	43db      	mvns	r3, r3
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575c:	4013      	ands	r3, r2
 800575e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0159      	lsls	r1, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	440b      	add	r3, r1
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	4619      	mov	r1, r3
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <USB_DeactivateEndpoint+0x1b4>)
 800577e:	4013      	ands	r3, r2
 8005780:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	ec337800 	.word	0xec337800
 8005794:	eff37800 	.word	0xeff37800

08005798 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f040 815c 	bne.w	8005a72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d132      	bne.n	8005828 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	0cdb      	lsrs	r3, r3, #19
 8005822:	04db      	lsls	r3, r3, #19
 8005824:	6113      	str	r3, [r2, #16]
 8005826:	e074      	b.n	8005912 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	0cdb      	lsrs	r3, r3, #19
 8005844:	04db      	lsls	r3, r3, #19
 8005846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800586a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	440b      	add	r3, r1
 8005884:	1e59      	subs	r1, r3, #1
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	fbb1 f3f3 	udiv	r3, r1, r3
 800588e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005890:	4b9d      	ldr	r3, [pc, #628]	; (8005b08 <USB_EPStartXfer+0x370>)
 8005892:	400b      	ands	r3, r1
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	0148      	lsls	r0, r1, #5
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	4401      	add	r1, r0
 800589c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	69b9      	ldr	r1, [r7, #24]
 80058bc:	0148      	lsls	r0, r1, #5
 80058be:	69f9      	ldr	r1, [r7, #28]
 80058c0:	4401      	add	r1, r0
 80058c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d11f      	bne.n	8005912 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005910:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d14b      	bne.n	80059b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	791b      	ldrb	r3, [r3, #4]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d128      	bne.n	800598e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d110      	bne.n	800596e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e00f      	b.n	800598e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e133      	b.n	8005c18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d015      	beq.n	8005a04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 811b 	beq.w	8005c18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	2101      	movs	r1, #1
 80059f4:	fa01 f303 	lsl.w	r3, r1, r3
 80059f8:	69f9      	ldr	r1, [r7, #28]
 80059fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fe:	4313      	orrs	r3, r2
 8005a00:	634b      	str	r3, [r1, #52]	; 0x34
 8005a02:	e109      	b.n	8005c18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d110      	bne.n	8005a36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e00f      	b.n	8005a56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6919      	ldr	r1, [r3, #16]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	b298      	uxth	r0, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	4603      	mov	r3, r0
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fade 	bl	800602c <USB_WritePacket>
 8005a70:	e0d2      	b.n	8005c18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	0cdb      	lsrs	r3, r3, #19
 8005a8e:	04db      	lsls	r3, r3, #19
 8005a90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ab4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d126      	bne.n	8005b0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	0148      	lsls	r0, r1, #5
 8005ad8:	69f9      	ldr	r1, [r7, #28]
 8005ada:	4401      	add	r1, r0
 8005adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b02:	6113      	str	r3, [r2, #16]
 8005b04:	e03a      	b.n	8005b7c <USB_EPStartXfer+0x3e4>
 8005b06:	bf00      	nop
 8005b08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	1e5a      	subs	r2, r3, #1
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	8afa      	ldrh	r2, [r7, #22]
 8005b28:	fb03 f202 	mul.w	r2, r3, r2
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	8afb      	ldrh	r3, [r7, #22]
 8005b40:	04d9      	lsls	r1, r3, #19
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <USB_EPStartXfer+0x48c>)
 8005b44:	400b      	ands	r3, r1
 8005b46:	69b9      	ldr	r1, [r7, #24]
 8005b48:	0148      	lsls	r0, r1, #5
 8005b4a:	69f9      	ldr	r1, [r7, #28]
 8005b4c:	4401      	add	r1, r0
 8005b4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b52:	4313      	orrs	r3, r2
 8005b54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	0148      	lsls	r0, r1, #5
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	4401      	add	r1, r0
 8005b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10d      	bne.n	8005b9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6919      	ldr	r1, [r3, #16]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	791b      	ldrb	r3, [r3, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d128      	bne.n	8005bf8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d110      	bne.n	8005bd8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e00f      	b.n	8005bf8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	1ff80000 	.word	0x1ff80000

08005c28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 80ce 	bne.w	8005de6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d132      	bne.n	8005cb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	0cdb      	lsrs	r3, r3, #19
 8005cb2:	04db      	lsls	r3, r3, #19
 8005cb4:	6113      	str	r3, [r2, #16]
 8005cb6:	e04e      	b.n	8005d56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	0cdb      	lsrs	r3, r3, #19
 8005cd4:	04db      	lsls	r3, r3, #19
 8005cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d903      	bls.n	8005d10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d46:	6939      	ldr	r1, [r7, #16]
 8005d48:	0148      	lsls	r0, r1, #5
 8005d4a:	6979      	ldr	r1, [r7, #20]
 8005d4c:	4401      	add	r1, r0
 8005d4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d52:	4313      	orrs	r3, r2
 8005d54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d11e      	bne.n	8005d9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e097      	b.n	8005eca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005db8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8083 	beq.w	8005eca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4313      	orrs	r3, r2
 8005de2:	634b      	str	r3, [r1, #52]	; 0x34
 8005de4:	e071      	b.n	8005eca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e00:	0cdb      	lsrs	r3, r3, #19
 8005e02:	04db      	lsls	r3, r3, #19
 8005e04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	6939      	ldr	r1, [r7, #16]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d10d      	bne.n	8005eaa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6919      	ldr	r1, [r3, #16]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d14a      	bne.n	8005f8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0e:	f040 8086 	bne.w	800601e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d902      	bls.n	8005f70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6e:	e056      	b.n	800601e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f88:	d0e7      	beq.n	8005f5a <USB_EPStopXfer+0x82>
 8005f8a:	e048      	b.n	800601e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa4:	d13b      	bne.n	800601e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d902      	bls.n	8006004 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
          break;
 8006002:	e00c      	b.n	800601e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800601c:	d0e7      	beq.n	8005fee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800602c:	b480      	push	{r7}
 800602e:	b089      	sub	sp, #36	; 0x24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	460b      	mov	r3, r1
 800603c:	71fb      	strb	r3, [r7, #7]
 800603e:	4613      	mov	r3, r2
 8006040:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800604a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800604e:	2b00      	cmp	r3, #0
 8006050:	d123      	bne.n	800609a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006052:	88bb      	ldrh	r3, [r7, #4]
 8006054:	3303      	adds	r3, #3
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	e018      	b.n	8006092 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	031a      	lsls	r2, r3, #12
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	461a      	mov	r2, r3
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3301      	adds	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3301      	adds	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	3301      	adds	r3, #1
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	429a      	cmp	r2, r3
 8006098:	d3e2      	bcc.n	8006060 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3724      	adds	r7, #36	; 0x24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b08b      	sub	sp, #44	; 0x2c
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	e014      	b.n	80060fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	601a      	str	r2, [r3, #0]
    pDest++;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	3301      	adds	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	3301      	adds	r3, #1
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	3301      	adds	r3, #1
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	429a      	cmp	r2, r3
 8006104:	d3e6      	bcc.n	80060d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006106:	8bfb      	ldrh	r3, [r7, #30]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01e      	beq.n	800614a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006116:	461a      	mov	r2, r3
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	b2da      	uxtb	r2, r3
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	701a      	strb	r2, [r3, #0]
      i++;
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	3301      	adds	r3, #1
 8006136:	623b      	str	r3, [r7, #32]
      pDest++;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	3301      	adds	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800613e:	8bfb      	ldrh	r3, [r7, #30]
 8006140:	3b01      	subs	r3, #1
 8006142:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006144:	8bfb      	ldrh	r3, [r7, #30]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1ea      	bne.n	8006120 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800614c:	4618      	mov	r0, r3
 800614e:	372c      	adds	r7, #44	; 0x2c
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d12c      	bne.n	80061ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	db12      	blt.n	80061ac <USB_EPSetStall+0x54>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00f      	beq.n	80061ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e02b      	b.n	8006226 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	db12      	blt.n	8006206 <USB_EPSetStall+0xae>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006204:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006224:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d128      	bne.n	80062a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800626e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	791b      	ldrb	r3, [r3, #4]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d003      	beq.n	8006280 <USB_EPClearStall+0x4c>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d138      	bne.n	80062f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e027      	b.n	80062f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	791b      	ldrb	r3, [r3, #4]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d003      	beq.n	80062d2 <USB_EPClearStall+0x9e>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	791b      	ldrb	r3, [r3, #4]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d10f      	bne.n	80062f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006322:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800637a:	f023 0302 	bic.w	r3, r3, #2
 800637e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	4013      	ands	r3, r2
 8006418:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	0c1b      	lsrs	r3, r3, #16
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	b29b      	uxth	r3, r3
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4013      	ands	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800648c:	68bb      	ldr	r3, [r7, #8]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ca:	01db      	lsls	r3, r3, #7
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4013      	ands	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e8:	68bb      	ldr	r3, [r7, #8]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0301 	and.w	r3, r3, #1
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006548:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	460b      	mov	r3, r1
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	333c      	adds	r3, #60	; 0x3c
 800656e:	3304      	adds	r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4a26      	ldr	r2, [pc, #152]	; (8006610 <USB_EP0_OutStart+0xb8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d90a      	bls.n	8006592 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658c:	d101      	bne.n	8006592 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e037      	b.n	8006602 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f043 0318 	orr.w	r3, r3, #24
 80065c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	4f54300a 	.word	0x4f54300a

08006614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a13      	ldr	r2, [pc, #76]	; (8006678 <USB_CoreReset+0x64>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e01b      	b.n	800666a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	daf2      	bge.n	8006620 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f043 0201 	orr.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <USB_CoreReset+0x64>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d901      	bls.n	800665c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e006      	b.n	800666a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d0f0      	beq.n	800664a <USB_CoreReset+0x36>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	00030d40 	.word	0x00030d40

0800667c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006688:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800668c:	f003 fec8 	bl	800a420 <USBD_static_malloc>
 8006690:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	; 0xb0
 80066a2:	2100      	movs	r1, #0
 80066a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066a8:	2302      	movs	r3, #2
 80066aa:	e0d4      	b.n	8006856 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f003 ff1c 	bl	800a4f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32b0      	adds	r2, #176	; 0xb0
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	; 0xb0
 80066d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7c1b      	ldrb	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d138      	bne.n	8006756 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066e4:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <USBD_CDC_Init+0x1e4>)
 80066e6:	7819      	ldrb	r1, [r3, #0]
 80066e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ec:	2202      	movs	r2, #2
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f003 fd73 	bl	800a1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066f4:	4b5a      	ldr	r3, [pc, #360]	; (8006860 <USBD_CDC_Init+0x1e4>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f003 020f 	and.w	r2, r3, #15
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3324      	adds	r3, #36	; 0x24
 800670a:	2201      	movs	r2, #1
 800670c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800670e:	4b55      	ldr	r3, [pc, #340]	; (8006864 <USBD_CDC_Init+0x1e8>)
 8006710:	7819      	ldrb	r1, [r3, #0]
 8006712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006716:	2202      	movs	r2, #2
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f003 fd5e 	bl	800a1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800671e:	4b51      	ldr	r3, [pc, #324]	; (8006864 <USBD_CDC_Init+0x1e8>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 020f 	and.w	r2, r3, #15
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006736:	2201      	movs	r2, #1
 8006738:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800673a:	4b4b      	ldr	r3, [pc, #300]	; (8006868 <USBD_CDC_Init+0x1ec>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	3326      	adds	r3, #38	; 0x26
 8006750:	2210      	movs	r2, #16
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e035      	b.n	80067c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006756:	4b42      	ldr	r3, [pc, #264]	; (8006860 <USBD_CDC_Init+0x1e4>)
 8006758:	7819      	ldrb	r1, [r3, #0]
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	2202      	movs	r2, #2
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f003 fd3b 	bl	800a1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006764:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <USBD_CDC_Init+0x1e4>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3324      	adds	r3, #36	; 0x24
 800677a:	2201      	movs	r2, #1
 800677c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800677e:	4b39      	ldr	r3, [pc, #228]	; (8006864 <USBD_CDC_Init+0x1e8>)
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	2340      	movs	r3, #64	; 0x40
 8006784:	2202      	movs	r2, #2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f003 fd27 	bl	800a1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800678c:	4b35      	ldr	r3, [pc, #212]	; (8006864 <USBD_CDC_Init+0x1e8>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067a4:	2201      	movs	r2, #1
 80067a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067a8:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <USBD_CDC_Init+0x1ec>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3326      	adds	r3, #38	; 0x26
 80067be:	2210      	movs	r2, #16
 80067c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067c2:	4b29      	ldr	r3, [pc, #164]	; (8006868 <USBD_CDC_Init+0x1ec>)
 80067c4:	7819      	ldrb	r1, [r3, #0]
 80067c6:	2308      	movs	r3, #8
 80067c8:	2203      	movs	r2, #3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f003 fd05 	bl	800a1da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067d0:	4b25      	ldr	r3, [pc, #148]	; (8006868 <USBD_CDC_Init+0x1ec>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3324      	adds	r3, #36	; 0x24
 80067e6:	2201      	movs	r2, #1
 80067e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	33b0      	adds	r3, #176	; 0xb0
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006820:	2302      	movs	r3, #2
 8006822:	e018      	b.n	8006856 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7c1b      	ldrb	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <USBD_CDC_Init+0x1e8>)
 800682e:	7819      	ldrb	r1, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f003 fdbc 	bl	800a3b8 <USBD_LL_PrepareReceive>
 8006840:	e008      	b.n	8006854 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006842:	4b08      	ldr	r3, [pc, #32]	; (8006864 <USBD_CDC_Init+0x1e8>)
 8006844:	7819      	ldrb	r1, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f003 fdb2 	bl	800a3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000093 	.word	0x20000093
 8006864:	20000094 	.word	0x20000094
 8006868:	20000095 	.word	0x20000095

0800686c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006878:	4b3a      	ldr	r3, [pc, #232]	; (8006964 <USBD_CDC_DeInit+0xf8>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f003 fcd1 	bl	800a226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006884:	4b37      	ldr	r3, [pc, #220]	; (8006964 <USBD_CDC_DeInit+0xf8>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 020f 	and.w	r2, r3, #15
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	3324      	adds	r3, #36	; 0x24
 800689a:	2200      	movs	r2, #0
 800689c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800689e:	4b32      	ldr	r3, [pc, #200]	; (8006968 <USBD_CDC_DeInit+0xfc>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f003 fcbe 	bl	800a226 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <USBD_CDC_DeInit+0xfc>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 020f 	and.w	r2, r3, #15
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068c2:	2200      	movs	r2, #0
 80068c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068c6:	4b29      	ldr	r3, [pc, #164]	; (800696c <USBD_CDC_DeInit+0x100>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f003 fcaa 	bl	800a226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068d2:	4b26      	ldr	r3, [pc, #152]	; (800696c <USBD_CDC_DeInit+0x100>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <USBD_CDC_DeInit+0x100>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	3326      	adds	r3, #38	; 0x26
 8006902:	2200      	movs	r2, #0
 8006904:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	32b0      	adds	r2, #176	; 0xb0
 8006910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01f      	beq.n	8006958 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	33b0      	adds	r3, #176	; 0xb0
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32b0      	adds	r2, #176	; 0xb0
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	4618      	mov	r0, r3
 800693c:	f003 fd7e 	bl	800a43c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32b0      	adds	r2, #176	; 0xb0
 800694a:	2100      	movs	r1, #0
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000093 	.word	0x20000093
 8006968:	20000094 	.word	0x20000094
 800696c:	20000095 	.word	0x20000095

08006970 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32b0      	adds	r2, #176	; 0xb0
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	e0bf      	b.n	8006b20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d050      	beq.n	8006a4e <USBD_CDC_Setup+0xde>
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	f040 80af 	bne.w	8006b10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	88db      	ldrh	r3, [r3, #6]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d03a      	beq.n	8006a30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da1b      	bge.n	80069fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	33b0      	adds	r3, #176	; 0xb0
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	88d2      	ldrh	r2, [r2, #6]
 80069e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b07      	cmp	r3, #7
 80069e8:	bf28      	it	cs
 80069ea:	2307      	movcs	r3, #7
 80069ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	89fa      	ldrh	r2, [r7, #14]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fd43 	bl	8008480 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069fa:	e090      	b.n	8006b1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	785a      	ldrb	r2, [r3, #1]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8006a0c:	d803      	bhi.n	8006a16 <USBD_CDC_Setup+0xa6>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	e000      	b.n	8006a18 <USBD_CDC_Setup+0xa8>
 8006a16:	2240      	movs	r2, #64	; 0x40
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a1e:	6939      	ldr	r1, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a26:	461a      	mov	r2, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fd55 	bl	80084d8 <USBD_CtlPrepareRx>
      break;
 8006a2e:	e076      	b.n	8006b1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	33b0      	adds	r3, #176	; 0xb0
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	7850      	ldrb	r0, [r2, #1]
 8006a46:	2200      	movs	r2, #0
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	4798      	blx	r3
      break;
 8006a4c:	e067      	b.n	8006b1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b0b      	cmp	r3, #11
 8006a54:	d851      	bhi.n	8006afa <USBD_CDC_Setup+0x18a>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <USBD_CDC_Setup+0xec>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a8d 	.word	0x08006a8d
 8006a60:	08006b09 	.word	0x08006b09
 8006a64:	08006afb 	.word	0x08006afb
 8006a68:	08006afb 	.word	0x08006afb
 8006a6c:	08006afb 	.word	0x08006afb
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006afb 	.word	0x08006afb
 8006a78:	08006afb 	.word	0x08006afb
 8006a7c:	08006afb 	.word	0x08006afb
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ae1 	.word	0x08006ae1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d107      	bne.n	8006aa8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a98:	f107 030a 	add.w	r3, r7, #10
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fced 	bl	8008480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aa6:	e032      	b.n	8006b0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fc77 	bl	800839e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab4:	e02b      	b.n	8006b0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d107      	bne.n	8006ad2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ac2:	f107 030d 	add.w	r3, r7, #13
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fcd8 	bl	8008480 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ad0:	e01d      	b.n	8006b0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fc62 	bl	800839e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ade:	e016      	b.n	8006b0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d00f      	beq.n	8006b0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fc55 	bl	800839e <USBD_CtlError>
            ret = USBD_FAIL;
 8006af4:	2303      	movs	r3, #3
 8006af6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006af8:	e008      	b.n	8006b0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fc4e 	bl	800839e <USBD_CtlError>
          ret = USBD_FAIL;
 8006b02:	2303      	movs	r3, #3
 8006b04:	75fb      	strb	r3, [r7, #23]
          break;
 8006b06:	e002      	b.n	8006b0e <USBD_CDC_Setup+0x19e>
          break;
 8006b08:	bf00      	nop
 8006b0a:	e008      	b.n	8006b1e <USBD_CDC_Setup+0x1ae>
          break;
 8006b0c:	bf00      	nop
      }
      break;
 8006b0e:	e006      	b.n	8006b1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fc43 	bl	800839e <USBD_CtlError>
      ret = USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	32b0      	adds	r2, #176	; 0xb0
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e065      	b.n	8006c1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	32b0      	adds	r2, #176	; 0xb0
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	3318      	adds	r3, #24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d02f      	beq.n	8006bdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3318      	adds	r3, #24
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	f003 010f 	and.w	r1, r3, #15
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4403      	add	r3, r0
 8006ba4:	3348      	adds	r3, #72	; 0x48
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d112      	bne.n	8006bdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	f003 020f 	and.w	r2, r3, #15
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3318      	adds	r3, #24
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bce:	78f9      	ldrb	r1, [r7, #3]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f003 fbce 	bl	800a376 <USBD_LL_Transmit>
 8006bda:	e01f      	b.n	8006c1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	33b0      	adds	r3, #176	; 0xb0
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	33b0      	adds	r3, #176	; 0xb0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	32b0      	adds	r2, #176	; 0xb0
 8006c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	32b0      	adds	r2, #176	; 0xb0
 8006c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e01a      	b.n	8006c8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f003 fbcc 	bl	800a3fa <USBD_LL_GetRxDataSize>
 8006c62:	4602      	mov	r2, r0
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	33b0      	adds	r3, #176	; 0xb0
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	32b0      	adds	r2, #176	; 0xb0
 8006ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e025      	b.n	8006d04 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	33b0      	adds	r3, #176	; 0xb0
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01a      	beq.n	8006d02 <USBD_CDC_EP0_RxReady+0x6c>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cd2:	2bff      	cmp	r3, #255	; 0xff
 8006cd4:	d015      	beq.n	8006d02 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	33b0      	adds	r3, #176	; 0xb0
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cf6:	b292      	uxth	r2, r2
 8006cf8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d14:	2182      	movs	r1, #130	; 0x82
 8006d16:	4818      	ldr	r0, [pc, #96]	; (8006d78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d18:	f000 fd09 	bl	800772e <USBD_GetEpDesc>
 8006d1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4815      	ldr	r0, [pc, #84]	; (8006d78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d22:	f000 fd04 	bl	800772e <USBD_GetEpDesc>
 8006d26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d28:	2181      	movs	r1, #129	; 0x81
 8006d2a:	4813      	ldr	r0, [pc, #76]	; (8006d78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d2c:	f000 fcff 	bl	800772e <USBD_GetEpDesc>
 8006d30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d4c:	711a      	strb	r2, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d60:	711a      	strb	r2, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2243      	movs	r2, #67	; 0x43
 8006d6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000050 	.word	0x20000050

08006d7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d84:	2182      	movs	r1, #130	; 0x82
 8006d86:	4818      	ldr	r0, [pc, #96]	; (8006de8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d88:	f000 fcd1 	bl	800772e <USBD_GetEpDesc>
 8006d8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4815      	ldr	r0, [pc, #84]	; (8006de8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d92:	f000 fccc 	bl	800772e <USBD_GetEpDesc>
 8006d96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d98:	2181      	movs	r1, #129	; 0x81
 8006d9a:	4813      	ldr	r0, [pc, #76]	; (8006de8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d9c:	f000 fcc7 	bl	800772e <USBD_GetEpDesc>
 8006da0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2210      	movs	r2, #16
 8006dac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2200      	movs	r2, #0
 8006db8:	711a      	strb	r2, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f042 0202 	orr.w	r2, r2, #2
 8006dc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d006      	beq.n	8006dd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	711a      	strb	r2, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f042 0202 	orr.w	r2, r2, #2
 8006dd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2243      	movs	r2, #67	; 0x43
 8006dda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000050 	.word	0x20000050

08006dec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006df4:	2182      	movs	r1, #130	; 0x82
 8006df6:	4818      	ldr	r0, [pc, #96]	; (8006e58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006df8:	f000 fc99 	bl	800772e <USBD_GetEpDesc>
 8006dfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4815      	ldr	r0, [pc, #84]	; (8006e58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e02:	f000 fc94 	bl	800772e <USBD_GetEpDesc>
 8006e06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e08:	2181      	movs	r1, #129	; 0x81
 8006e0a:	4813      	ldr	r0, [pc, #76]	; (8006e58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e0c:	f000 fc8f 	bl	800772e <USBD_GetEpDesc>
 8006e10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e2c:	711a      	strb	r2, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d006      	beq.n	8006e46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e40:	711a      	strb	r2, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2243      	movs	r2, #67	; 0x43
 8006e4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000050 	.word	0x20000050

08006e5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	220a      	movs	r2, #10
 8006e68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e6a:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	2000000c 	.word	0x2000000c

08006e7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e009      	b.n	8006ea4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	33b0      	adds	r3, #176	; 0xb0
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	32b0      	adds	r2, #176	; 0xb0
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e008      	b.n	8006ee8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32b0      	adds	r2, #176	; 0xb0
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e004      	b.n	8006f22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32b0      	adds	r2, #176	; 0xb0
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32b0      	adds	r2, #176	; 0xb0
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e018      	b.n	8006f90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7c1b      	ldrb	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <USBD_CDC_ReceivePacket+0x68>)
 8006f68:	7819      	ldrb	r1, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f003 fa1f 	bl	800a3b8 <USBD_LL_PrepareReceive>
 8006f7a:	e008      	b.n	8006f8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <USBD_CDC_ReceivePacket+0x68>)
 8006f7e:	7819      	ldrb	r1, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f86:	2340      	movs	r3, #64	; 0x40
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f003 fa15 	bl	800a3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000094 	.word	0x20000094

08006f9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e01f      	b.n	8006ff4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	79fa      	ldrb	r2, [r7, #7]
 8006fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f003 f88f 	bl	800a10c <USBD_LL_Init>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e025      	b.n	8007060 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32ae      	adds	r2, #174	; 0xae
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00f      	beq.n	8007050 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32ae      	adds	r2, #174	; 0xae
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f107 020e 	add.w	r2, r7, #14
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	4602      	mov	r2, r0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f003 f897 	bl	800a1a4 <USBD_LL_Start>
 8007076:	4603      	mov	r3, r0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4611      	mov	r1, r2
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	4611      	mov	r1, r2
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f908 	bl	800832a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007128:	461a      	mov	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b02      	cmp	r3, #2
 800713c:	d01a      	beq.n	8007174 <USBD_LL_SetupStage+0x72>
 800713e:	2b02      	cmp	r3, #2
 8007140:	d822      	bhi.n	8007188 <USBD_LL_SetupStage+0x86>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <USBD_LL_SetupStage+0x4a>
 8007146:	2b01      	cmp	r3, #1
 8007148:	d00a      	beq.n	8007160 <USBD_LL_SetupStage+0x5e>
 800714a:	e01d      	b.n	8007188 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb5f 	bl	8007818 <USBD_StdDevReq>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
      break;
 800715e:	e020      	b.n	80071a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fbc7 	bl	80078fc <USBD_StdItfReq>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
      break;
 8007172:	e016      	b.n	80071a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fc29 	bl	80079d4 <USBD_StdEPReq>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
      break;
 8007186:	e00c      	b.n	80071a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800718e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f003 f864 	bl	800a264 <USBD_LL_StallEP>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
      break;
 80071a0:	bf00      	nop
  }

  return ret;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	460b      	mov	r3, r1
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d16e      	bne.n	80072a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	f040 8098 	bne.w	8007308 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d913      	bls.n	800720c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	4293      	cmp	r3, r2
 80071fc:	bf28      	it	cs
 80071fe:	4613      	movcs	r3, r2
 8007200:	461a      	mov	r2, r3
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 f984 	bl	8008512 <USBD_CtlContinueRx>
 800720a:	e07d      	b.n	8007308 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b02      	cmp	r3, #2
 8007218:	d014      	beq.n	8007244 <USBD_LL_DataOutStage+0x98>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d81d      	bhi.n	800725a <USBD_LL_DataOutStage+0xae>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <USBD_LL_DataOutStage+0x7c>
 8007222:	2b01      	cmp	r3, #1
 8007224:	d003      	beq.n	800722e <USBD_LL_DataOutStage+0x82>
 8007226:	e018      	b.n	800725a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	75bb      	strb	r3, [r7, #22]
            break;
 800722c:	e018      	b.n	8007260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fa5e 	bl	80076fa <USBD_CoreFindIF>
 800723e:	4603      	mov	r3, r0
 8007240:	75bb      	strb	r3, [r7, #22]
            break;
 8007242:	e00d      	b.n	8007260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4619      	mov	r1, r3
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fa60 	bl	8007714 <USBD_CoreFindEP>
 8007254:	4603      	mov	r3, r0
 8007256:	75bb      	strb	r3, [r7, #22]
            break;
 8007258:	e002      	b.n	8007260 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	75bb      	strb	r3, [r7, #22]
            break;
 800725e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007260:	7dbb      	ldrb	r3, [r7, #22]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d119      	bne.n	800729a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b03      	cmp	r3, #3
 8007270:	d113      	bne.n	800729a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007272:	7dba      	ldrb	r2, [r7, #22]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	32ae      	adds	r2, #174	; 0xae
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007282:	7dba      	ldrb	r2, [r7, #22]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800728a:	7dba      	ldrb	r2, [r7, #22]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	32ae      	adds	r2, #174	; 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f001 f94a 	bl	8008534 <USBD_CtlSendStatus>
 80072a0:	e032      	b.n	8007308 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4619      	mov	r1, r3
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa31 	bl	8007714 <USBD_CoreFindEP>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072b6:	7dbb      	ldrb	r3, [r7, #22]
 80072b8:	2bff      	cmp	r3, #255	; 0xff
 80072ba:	d025      	beq.n	8007308 <USBD_LL_DataOutStage+0x15c>
 80072bc:	7dbb      	ldrb	r3, [r7, #22]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d122      	bne.n	8007308 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d117      	bne.n	80072fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072ce:	7dba      	ldrb	r2, [r7, #22]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	32ae      	adds	r2, #174	; 0xae
 80072d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072de:	7dba      	ldrb	r2, [r7, #22]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072e6:	7dba      	ldrb	r2, [r7, #22]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	32ae      	adds	r2, #174	; 0xae
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	7afa      	ldrb	r2, [r7, #11]
 80072f4:	4611      	mov	r1, r2
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	4798      	blx	r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	e000      	b.n	800730a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d16f      	bne.n	8007406 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3314      	adds	r3, #20
 800732a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007332:	2b02      	cmp	r3, #2
 8007334:	d15a      	bne.n	80073ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d914      	bls.n	800736c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	461a      	mov	r2, r3
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f001 f8ac 	bl	80084b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800735e:	2300      	movs	r3, #0
 8007360:	2200      	movs	r2, #0
 8007362:	2100      	movs	r1, #0
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f003 f827 	bl	800a3b8 <USBD_LL_PrepareReceive>
 800736a:	e03f      	b.n	80073ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d11c      	bne.n	80073b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007380:	429a      	cmp	r2, r3
 8007382:	d316      	bcc.n	80073b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800738e:	429a      	cmp	r2, r3
 8007390:	d20f      	bcs.n	80073b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 f88d 	bl	80084b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073a4:	2300      	movs	r3, #0
 80073a6:	2200      	movs	r2, #0
 80073a8:	2100      	movs	r1, #0
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f003 f804 	bl	800a3b8 <USBD_LL_PrepareReceive>
 80073b0:	e01c      	b.n	80073ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d10f      	bne.n	80073de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f002 ff3f 	bl	800a264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f001 f8b7 	bl	800855a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d03a      	beq.n	800746c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff fe42 	bl	8007080 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007404:	e032      	b.n	800746c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007406:	7afb      	ldrb	r3, [r7, #11]
 8007408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f97f 	bl	8007714 <USBD_CoreFindEP>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	2bff      	cmp	r3, #255	; 0xff
 800741e:	d025      	beq.n	800746c <USBD_LL_DataInStage+0x15a>
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d122      	bne.n	800746c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d11c      	bne.n	800746c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007432:	7dfa      	ldrb	r2, [r7, #23]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	32ae      	adds	r2, #174	; 0xae
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d014      	beq.n	800746c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007442:	7dfa      	ldrb	r2, [r7, #23]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800744a:	7dfa      	ldrb	r2, [r7, #23]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	32ae      	adds	r2, #174	; 0xae
 8007450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	7afa      	ldrb	r2, [r7, #11]
 8007458:	4611      	mov	r1, r2
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	4798      	blx	r3
 800745e:	4603      	mov	r3, r0
 8007460:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007462:	7dbb      	ldrb	r3, [r7, #22]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007468:	7dbb      	ldrb	r3, [r7, #22]
 800746a:	e000      	b.n	800746e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d014      	beq.n	80074dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00e      	beq.n	80074dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6852      	ldr	r2, [r2, #4]
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	4611      	mov	r1, r2
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f002 fe79 	bl	800a1da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2240      	movs	r2, #64	; 0x40
 80074f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	2200      	movs	r2, #0
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f002 fe6b 	bl	800a1da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2240      	movs	r2, #64	; 0x40
 800750e:	621a      	str	r2, [r3, #32]

  return ret;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007548:	b2da      	uxtb	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2204      	movs	r2, #4
 8007554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b04      	cmp	r3, #4
 8007578:	d106      	bne.n	8007588 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007580:	b2da      	uxtb	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d110      	bne.n	80075cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32ae      	adds	r2, #174	; 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e01c      	b.n	8007632 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d115      	bne.n	8007630 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	; 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	; 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	4611      	mov	r1, r2
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	32ae      	adds	r2, #174	; 0xae
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	e01c      	b.n	8007696 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b03      	cmp	r3, #3
 8007666:	d115      	bne.n	8007694 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	; 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	32ae      	adds	r2, #174	; 0xae
 8007686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6852      	ldr	r2, [r2, #4]
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	4611      	mov	r1, r2
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007706:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007720:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	429a      	cmp	r2, r3
 8007754:	d920      	bls.n	8007798 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800775e:	e013      	b.n	8007788 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007760:	f107 030a 	add.w	r3, r7, #10
 8007764:	4619      	mov	r1, r3
 8007766:	6978      	ldr	r0, [r7, #20]
 8007768:	f000 f81b 	bl	80077a2 <USBD_GetNextDesc>
 800776c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b05      	cmp	r3, #5
 8007774:	d108      	bne.n	8007788 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	789b      	ldrb	r3, [r3, #2]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	429a      	cmp	r2, r3
 8007782:	d008      	beq.n	8007796 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	b29a      	uxth	r2, r3
 800778e:	897b      	ldrh	r3, [r7, #10]
 8007790:	429a      	cmp	r2, r3
 8007792:	d8e5      	bhi.n	8007760 <USBD_GetEpDesc+0x32>
 8007794:	e000      	b.n	8007798 <USBD_GetEpDesc+0x6a>
          break;
 8007796:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007798:	693b      	ldr	r3, [r7, #16]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4413      	add	r3, r2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ce:	68fb      	ldr	r3, [r7, #12]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	3301      	adds	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077fa:	8a3b      	ldrh	r3, [r7, #16]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b21a      	sxth	r2, r3
 8007800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007804:	4313      	orrs	r3, r2
 8007806:	b21b      	sxth	r3, r3
 8007808:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800780a:	89fb      	ldrh	r3, [r7, #14]
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d005      	beq.n	800783e <USBD_StdDevReq+0x26>
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d857      	bhi.n	80078e6 <USBD_StdDevReq+0xce>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00f      	beq.n	800785a <USBD_StdDevReq+0x42>
 800783a:	2b20      	cmp	r3, #32
 800783c:	d153      	bne.n	80078e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32ae      	adds	r2, #174	; 0xae
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
      break;
 8007858:	e04a      	b.n	80078f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b09      	cmp	r3, #9
 8007860:	d83b      	bhi.n	80078da <USBD_StdDevReq+0xc2>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_StdDevReq+0x50>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078bd 	.word	0x080078bd
 800786c:	080078d1 	.word	0x080078d1
 8007870:	080078db 	.word	0x080078db
 8007874:	080078c7 	.word	0x080078c7
 8007878:	080078db 	.word	0x080078db
 800787c:	0800789b 	.word	0x0800789b
 8007880:	08007891 	.word	0x08007891
 8007884:	080078db 	.word	0x080078db
 8007888:	080078b3 	.word	0x080078b3
 800788c:	080078a5 	.word	0x080078a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa3c 	bl	8007d10 <USBD_GetDescriptor>
          break;
 8007898:	e024      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fba1 	bl	8007fe4 <USBD_SetAddress>
          break;
 80078a2:	e01f      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fbe0 	bl	800806c <USBD_SetConfig>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
          break;
 80078b0:	e018      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc83 	bl	80081c0 <USBD_GetConfig>
          break;
 80078ba:	e013      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fcb4 	bl	800822c <USBD_GetStatus>
          break;
 80078c4:	e00e      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fce3 	bl	8008294 <USBD_SetFeature>
          break;
 80078ce:	e009      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fd07 	bl	80082e6 <USBD_ClrFeature>
          break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fd5e 	bl	800839e <USBD_CtlError>
          break;
 80078e2:	bf00      	nop
      }
      break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fd58 	bl	800839e <USBD_CtlError>
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d005      	beq.n	8007922 <USBD_StdItfReq+0x26>
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d852      	bhi.n	80079c0 <USBD_StdItfReq+0xc4>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <USBD_StdItfReq+0x26>
 800791e:	2b20      	cmp	r3, #32
 8007920:	d14e      	bne.n	80079c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	2b02      	cmp	r3, #2
 800792e:	d840      	bhi.n	80079b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	889b      	ldrh	r3, [r3, #4]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d836      	bhi.n	80079a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	889b      	ldrh	r3, [r3, #4]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fed9 	bl	80076fa <USBD_CoreFindIF>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d01d      	beq.n	800798e <USBD_StdItfReq+0x92>
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11a      	bne.n	800798e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007958:	7bba      	ldrb	r2, [r7, #14]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32ae      	adds	r2, #174	; 0xae
 800795e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00f      	beq.n	8007988 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007968:	7bba      	ldrb	r2, [r7, #14]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007970:	7bba      	ldrb	r2, [r7, #14]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32ae      	adds	r2, #174	; 0xae
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007986:	e004      	b.n	8007992 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800798c:	e001      	b.n	8007992 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	88db      	ldrh	r3, [r3, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d110      	bne.n	80079bc <USBD_StdItfReq+0xc0>
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10d      	bne.n	80079bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fdc7 	bl	8008534 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079a6:	e009      	b.n	80079bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fcf7 	bl	800839e <USBD_CtlError>
          break;
 80079b0:	e004      	b.n	80079bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fcf2 	bl	800839e <USBD_CtlError>
          break;
 80079ba:	e000      	b.n	80079be <USBD_StdItfReq+0xc2>
          break;
 80079bc:	bf00      	nop
      }
      break;
 80079be:	e004      	b.n	80079ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fceb 	bl	800839e <USBD_CtlError>
      break;
 80079c8:	bf00      	nop
  }

  return ret;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	889b      	ldrh	r3, [r3, #4]
 80079e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d007      	beq.n	8007a04 <USBD_StdEPReq+0x30>
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	f200 817f 	bhi.w	8007cf8 <USBD_StdEPReq+0x324>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02a      	beq.n	8007a54 <USBD_StdEPReq+0x80>
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	f040 817a 	bne.w	8007cf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fe83 	bl	8007714 <USBD_CoreFindEP>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a12:	7b7b      	ldrb	r3, [r7, #13]
 8007a14:	2bff      	cmp	r3, #255	; 0xff
 8007a16:	f000 8174 	beq.w	8007d02 <USBD_StdEPReq+0x32e>
 8007a1a:	7b7b      	ldrb	r3, [r7, #13]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 8170 	bne.w	8007d02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a22:	7b7a      	ldrb	r2, [r7, #13]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a2a:	7b7a      	ldrb	r2, [r7, #13]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	32ae      	adds	r2, #174	; 0xae
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 8163 	beq.w	8007d02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a3c:	7b7a      	ldrb	r2, [r7, #13]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	32ae      	adds	r2, #174	; 0xae
 8007a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a52:	e156      	b.n	8007d02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d008      	beq.n	8007a6e <USBD_StdEPReq+0x9a>
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	f300 8145 	bgt.w	8007cec <USBD_StdEPReq+0x318>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 809b 	beq.w	8007b9e <USBD_StdEPReq+0x1ca>
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d03c      	beq.n	8007ae6 <USBD_StdEPReq+0x112>
 8007a6c:	e13e      	b.n	8007cec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d002      	beq.n	8007a80 <USBD_StdEPReq+0xac>
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d016      	beq.n	8007aac <USBD_StdEPReq+0xd8>
 8007a7e:	e02c      	b.n	8007ada <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <USBD_StdEPReq+0xce>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d00a      	beq.n	8007aa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f002 fbe7 	bl	800a264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a96:	2180      	movs	r1, #128	; 0x80
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 fbe3 	bl	800a264 <USBD_LL_StallEP>
 8007a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa0:	e020      	b.n	8007ae4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc7a 	bl	800839e <USBD_CtlError>
              break;
 8007aaa:	e01b      	b.n	8007ae4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	885b      	ldrh	r3, [r3, #2]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10e      	bne.n	8007ad2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <USBD_StdEPReq+0xfe>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d008      	beq.n	8007ad2 <USBD_StdEPReq+0xfe>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f002 fbc9 	bl	800a264 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fd2e 	bl	8008534 <USBD_CtlSendStatus>

              break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fc5e 	bl	800839e <USBD_CtlError>
              break;
 8007ae2:	bf00      	nop
          }
          break;
 8007ae4:	e107      	b.n	8007cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d002      	beq.n	8007af8 <USBD_StdEPReq+0x124>
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d016      	beq.n	8007b24 <USBD_StdEPReq+0x150>
 8007af6:	e04b      	b.n	8007b90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <USBD_StdEPReq+0x146>
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d00a      	beq.n	8007b1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f002 fbab 	bl	800a264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f002 fba7 	bl	800a264 <USBD_LL_StallEP>
 8007b16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b18:	e040      	b.n	8007b9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fc3e 	bl	800839e <USBD_CtlError>
              break;
 8007b22:	e03b      	b.n	8007b9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d136      	bne.n	8007b9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f002 fbb1 	bl	800a2a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fcf7 	bl	8008534 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fde2 	bl	8007714 <USBD_CoreFindEP>
 8007b50:	4603      	mov	r3, r0
 8007b52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b54:	7b7b      	ldrb	r3, [r7, #13]
 8007b56:	2bff      	cmp	r3, #255	; 0xff
 8007b58:	d01f      	beq.n	8007b9a <USBD_StdEPReq+0x1c6>
 8007b5a:	7b7b      	ldrb	r3, [r7, #13]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11c      	bne.n	8007b9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b60:	7b7a      	ldrb	r2, [r7, #13]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b68:	7b7a      	ldrb	r2, [r7, #13]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	32ae      	adds	r2, #174	; 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b78:	7b7a      	ldrb	r2, [r7, #13]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32ae      	adds	r2, #174	; 0xae
 8007b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b8e:	e004      	b.n	8007b9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fc03 	bl	800839e <USBD_CtlError>
              break;
 8007b98:	e000      	b.n	8007b9c <USBD_StdEPReq+0x1c8>
              break;
 8007b9a:	bf00      	nop
          }
          break;
 8007b9c:	e0ab      	b.n	8007cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d002      	beq.n	8007bb0 <USBD_StdEPReq+0x1dc>
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d032      	beq.n	8007c14 <USBD_StdEPReq+0x240>
 8007bae:	e097      	b.n	8007ce0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <USBD_StdEPReq+0x1f2>
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d004      	beq.n	8007bc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fbed 	bl	800839e <USBD_CtlError>
                break;
 8007bc4:	e091      	b.n	8007cea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da0b      	bge.n	8007be6 <USBD_StdEPReq+0x212>
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	3310      	adds	r3, #16
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	3304      	adds	r3, #4
 8007be4:	e00b      	b.n	8007bfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fc37 	bl	8008480 <USBD_CtlSendData>
              break;
 8007c12:	e06a      	b.n	8007cea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da11      	bge.n	8007c40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	f003 020f 	and.w	r2, r3, #15
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3324      	adds	r3, #36	; 0x24
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d117      	bne.n	8007c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fbb0 	bl	800839e <USBD_CtlError>
                  break;
 8007c3e:	e054      	b.n	8007cea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	f003 020f 	and.w	r2, r3, #15
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fb9d 	bl	800839e <USBD_CtlError>
                  break;
 8007c64:	e041      	b.n	8007cea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	da0b      	bge.n	8007c86 <USBD_StdEPReq+0x2b2>
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4413      	add	r3, r2
 8007c82:	3304      	adds	r3, #4
 8007c84:	e00b      	b.n	8007c9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <USBD_StdEPReq+0x2d8>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d103      	bne.n	8007cb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	e00e      	b.n	8007cd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f002 fb11 	bl	800a2e0 <USBD_LL_IsStallEP>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fbd1 	bl	8008480 <USBD_CtlSendData>
              break;
 8007cde:	e004      	b.n	8007cea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fb5b 	bl	800839e <USBD_CtlError>
              break;
 8007ce8:	bf00      	nop
          }
          break;
 8007cea:	e004      	b.n	8007cf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fb55 	bl	800839e <USBD_CtlError>
          break;
 8007cf4:	bf00      	nop
      }
      break;
 8007cf6:	e005      	b.n	8007d04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fb4f 	bl	800839e <USBD_CtlError>
      break;
 8007d00:	e000      	b.n	8007d04 <USBD_StdEPReq+0x330>
      break;
 8007d02:	bf00      	nop
  }

  return ret;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	0a1b      	lsrs	r3, r3, #8
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b06      	cmp	r3, #6
 8007d32:	f200 8128 	bhi.w	8007f86 <USBD_GetDescriptor+0x276>
 8007d36:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBD_GetDescriptor+0x2c>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007f87 	.word	0x08007f87
 8007d4c:	08007f87 	.word	0x08007f87
 8007d50:	08007f27 	.word	0x08007f27
 8007d54:	08007f53 	.word	0x08007f53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	7c12      	ldrb	r2, [r2, #16]
 8007d64:	f107 0108 	add.w	r1, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
      break;
 8007d6e:	e112      	b.n	8007f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	7c1b      	ldrb	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10d      	bne.n	8007d94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f107 0208 	add.w	r2, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	2202      	movs	r2, #2
 8007d90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d92:	e100      	b.n	8007f96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	f107 0208 	add.w	r2, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	2202      	movs	r2, #2
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e0f2      	b.n	8007f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	885b      	ldrh	r3, [r3, #2]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	f200 80ac 	bhi.w	8007f14 <USBD_GetDescriptor+0x204>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <USBD_GetDescriptor+0xb4>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007ddd 	.word	0x08007ddd
 8007dc8:	08007e11 	.word	0x08007e11
 8007dcc:	08007e45 	.word	0x08007e45
 8007dd0:	08007e79 	.word	0x08007e79
 8007dd4:	08007ead 	.word	0x08007ead
 8007dd8:	08007ee1 	.word	0x08007ee1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e091      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 facb 	bl	800839e <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e089      	b.n	8007f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e077      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fab1 	bl	800839e <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e06f      	b.n	8007f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e05d      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa97 	bl	800839e <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e055      	b.n	8007f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e043      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa7d 	bl	800839e <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e03b      	b.n	8007f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7c12      	ldrb	r2, [r2, #16]
 8007ec4:	f107 0108 	add.w	r1, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ece:	e029      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa63 	bl	800839e <USBD_CtlError>
            err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ede:	e021      	b.n	8007f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7c12      	ldrb	r2, [r2, #16]
 8007ef8:	f107 0108 	add.w	r1, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f02:	e00f      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa49 	bl	800839e <USBD_CtlError>
            err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
          break;
 8007f12:	e007      	b.n	8007f24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa41 	bl	800839e <USBD_CtlError>
          err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f22:	bf00      	nop
      }
      break;
 8007f24:	e037      	b.n	8007f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	f107 0208 	add.w	r2, r7, #8
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4798      	blx	r3
 8007f3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f40:	e029      	b.n	8007f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa2a 	bl	800839e <USBD_CtlError>
        err++;
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f50:	e021      	b.n	8007f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7c1b      	ldrb	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10d      	bne.n	8007f76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	4610      	mov	r0, r2
 8007f68:	4798      	blx	r3
 8007f6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	2207      	movs	r2, #7
 8007f72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f74:	e00f      	b.n	8007f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa10 	bl	800839e <USBD_CtlError>
        err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	e007      	b.n	8007f96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa08 	bl	800839e <USBD_CtlError>
      err++;
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	3301      	adds	r3, #1
 8007f92:	72fb      	strb	r3, [r7, #11]
      break;
 8007f94:	bf00      	nop
  }

  if (err != 0U)
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11e      	bne.n	8007fda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	88db      	ldrh	r3, [r3, #6]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d016      	beq.n	8007fd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00e      	beq.n	8007fc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88da      	ldrh	r2, [r3, #6]
 8007fae:	893b      	ldrh	r3, [r7, #8]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	bf28      	it	cs
 8007fb4:	4613      	movcs	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fba:	893b      	ldrh	r3, [r7, #8]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa5d 	bl	8008480 <USBD_CtlSendData>
 8007fc6:	e009      	b.n	8007fdc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9e7 	bl	800839e <USBD_CtlError>
 8007fd0:	e004      	b.n	8007fdc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 faae 	bl	8008534 <USBD_CtlSendStatus>
 8007fd8:	e000      	b.n	8007fdc <USBD_GetDescriptor+0x2cc>
    return;
 8007fda:	bf00      	nop
  }
}
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop

08007fe4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	889b      	ldrh	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d131      	bne.n	800805a <USBD_SetAddress+0x76>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	88db      	ldrh	r3, [r3, #6]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d12d      	bne.n	800805a <USBD_SetAddress+0x76>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	2b7f      	cmp	r3, #127	; 0x7f
 8008004:	d829      	bhi.n	800805a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d104      	bne.n	8008028 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9bc 	bl	800839e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	e01d      	b.n	8008064 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	7bfa      	ldrb	r2, [r7, #15]
 800802c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f002 f97f 	bl	800a338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa7a 	bl	8008534 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	e009      	b.n	8008064 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	e004      	b.n	8008064 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f99e 	bl	800839e <USBD_CtlError>
  }
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	b2da      	uxtb	r2, r3
 8008080:	4b4e      	ldr	r3, [pc, #312]	; (80081bc <USBD_SetConfig+0x150>)
 8008082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008084:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <USBD_SetConfig+0x150>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d905      	bls.n	8008098 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f985 	bl	800839e <USBD_CtlError>
    return USBD_FAIL;
 8008094:	2303      	movs	r3, #3
 8008096:	e08c      	b.n	80081b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d002      	beq.n	80080aa <USBD_SetConfig+0x3e>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d029      	beq.n	80080fc <USBD_SetConfig+0x90>
 80080a8:	e075      	b.n	8008196 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080aa:	4b44      	ldr	r3, [pc, #272]	; (80081bc <USBD_SetConfig+0x150>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d020      	beq.n	80080f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080b2:	4b42      	ldr	r3, [pc, #264]	; (80081bc <USBD_SetConfig+0x150>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080bc:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <USBD_SetConfig+0x150>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fe ffe7 	bl	8007096 <USBD_SetClassConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f962 	bl	800839e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080e2:	e065      	b.n	80081b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa25 	bl	8008534 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2203      	movs	r2, #3
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080f2:	e05d      	b.n	80081b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa1d 	bl	8008534 <USBD_CtlSendStatus>
      break;
 80080fa:	e059      	b.n	80081b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080fc:	4b2f      	ldr	r3, [pc, #188]	; (80081bc <USBD_SetConfig+0x150>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d112      	bne.n	800812a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800810c:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <USBD_SetConfig+0x150>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fe ffd6 	bl	80070ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa06 	bl	8008534 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008128:	e042      	b.n	80081b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800812a:	4b24      	ldr	r3, [pc, #144]	; (80081bc <USBD_SetConfig+0x150>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d02a      	beq.n	800818e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fe ffc4 	bl	80070ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008146:	4b1d      	ldr	r3, [pc, #116]	; (80081bc <USBD_SetConfig+0x150>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <USBD_SetConfig+0x150>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe ff9d 	bl	8007096 <USBD_SetClassConfig>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f918 	bl	800839e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fe ffa9 	bl	80070ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008184:	e014      	b.n	80081b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9d4 	bl	8008534 <USBD_CtlSendStatus>
      break;
 800818c:	e010      	b.n	80081b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9d0 	bl	8008534 <USBD_CtlSendStatus>
      break;
 8008194:	e00c      	b.n	80081b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f900 	bl	800839e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800819e:	4b07      	ldr	r3, [pc, #28]	; (80081bc <USBD_SetConfig+0x150>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7fe ff92 	bl	80070ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081aa:	2303      	movs	r3, #3
 80081ac:	73fb      	strb	r3, [r7, #15]
      break;
 80081ae:	bf00      	nop
  }

  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200004b8 	.word	0x200004b8

080081c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	88db      	ldrh	r3, [r3, #6]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d004      	beq.n	80081dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f8e2 	bl	800839e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081da:	e023      	b.n	8008224 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	dc02      	bgt.n	80081ee <USBD_GetConfig+0x2e>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc03      	bgt.n	80081f4 <USBD_GetConfig+0x34>
 80081ec:	e015      	b.n	800821a <USBD_GetConfig+0x5a>
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d00b      	beq.n	800820a <USBD_GetConfig+0x4a>
 80081f2:	e012      	b.n	800821a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3308      	adds	r3, #8
 80081fe:	2201      	movs	r2, #1
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f93c 	bl	8008480 <USBD_CtlSendData>
        break;
 8008208:	e00c      	b.n	8008224 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3304      	adds	r3, #4
 800820e:	2201      	movs	r2, #1
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f934 	bl	8008480 <USBD_CtlSendData>
        break;
 8008218:	e004      	b.n	8008224 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f8be 	bl	800839e <USBD_CtlError>
        break;
 8008222:	bf00      	nop
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	b2db      	uxtb	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	2b02      	cmp	r3, #2
 8008242:	d81e      	bhi.n	8008282 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	88db      	ldrh	r3, [r3, #6]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d004      	beq.n	8008256 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8a5 	bl	800839e <USBD_CtlError>
        break;
 8008254:	e01a      	b.n	800828c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f043 0202 	orr.w	r2, r3, #2
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	330c      	adds	r3, #12
 8008276:	2202      	movs	r2, #2
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f900 	bl	8008480 <USBD_CtlSendData>
      break;
 8008280:	e004      	b.n	800828c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f88a 	bl	800839e <USBD_CtlError>
      break;
 800828a:	bf00      	nop
  }
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d107      	bne.n	80082b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f940 	bl	8008534 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082b4:	e013      	b.n	80082de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d10b      	bne.n	80082d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f930 	bl	8008534 <USBD_CtlSendStatus>
}
 80082d4:	e003      	b.n	80082de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f860 	bl	800839e <USBD_CtlError>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d80b      	bhi.n	8008316 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	885b      	ldrh	r3, [r3, #2]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10c      	bne.n	8008320 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f910 	bl	8008534 <USBD_CtlSendStatus>
      }
      break;
 8008314:	e004      	b.n	8008320 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f840 	bl	800839e <USBD_CtlError>
      break;
 800831e:	e000      	b.n	8008322 <USBD_ClrFeature+0x3c>
      break;
 8008320:	bf00      	nop
  }
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	781a      	ldrb	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7ff fa41 	bl	80077dc <SWAPBYTE>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fa34 	bl	80077dc <SWAPBYTE>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff fa27 	bl	80077dc <SWAPBYTE>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	80da      	strh	r2, [r3, #6]
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a8:	2180      	movs	r1, #128	; 0x80
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 ff5a 	bl	800a264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 ff56 	bl	800a264 <USBD_LL_StallEP>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d036      	beq.n	8008444 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f836 	bl	800844c <USBD_GetLen>
 80083e0:	4603      	mov	r3, r0
 80083e2:	3301      	adds	r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4413      	add	r3, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	3301      	adds	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	4413      	add	r3, r2
 8008406:	2203      	movs	r2, #3
 8008408:	701a      	strb	r2, [r3, #0]
  idx++;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	3301      	adds	r3, #1
 800840e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008410:	e013      	b.n	800843a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	4413      	add	r3, r2
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	7812      	ldrb	r2, [r2, #0]
 800841c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3301      	adds	r3, #1
 8008422:	613b      	str	r3, [r7, #16]
    idx++;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	3301      	adds	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4413      	add	r3, r2
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
    idx++;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	3301      	adds	r3, #1
 8008438:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e7      	bne.n	8008412 <USBD_GetString+0x52>
 8008442:	e000      	b.n	8008446 <USBD_GetString+0x86>
    return;
 8008444:	bf00      	nop
  }
}
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800845c:	e005      	b.n	800846a <USBD_GetLen+0x1e>
  {
    len++;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	3301      	adds	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	3301      	adds	r3, #1
 8008468:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f5      	bne.n	800845e <USBD_GetLen+0x12>
  }

  return len;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2202      	movs	r2, #2
 8008490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	2100      	movs	r1, #0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 ff65 	bl	800a376 <USBD_LL_Transmit>

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	2100      	movs	r1, #0
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f001 ff54 	bl	800a376 <USBD_LL_Transmit>

  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2203      	movs	r2, #3
 80084e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	2100      	movs	r1, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 ff58 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f001 ff47 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2204      	movs	r2, #4
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008544:	2300      	movs	r3, #0
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 ff13 	bl	800a376 <USBD_LL_Transmit>

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2205      	movs	r2, #5
 8008566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 ff21 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800858e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008592:	2b84      	cmp	r3, #132	; 0x84
 8008594:	d005      	beq.n	80085a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	3303      	adds	r3, #3
 80085a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085b4:	f000 fade 	bl	8008b74 <vTaskStartScheduler>
  
  return osOK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}

080085be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c0:	b089      	sub	sp, #36	; 0x24
 80085c2:	af04      	add	r7, sp, #16
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d020      	beq.n	8008612 <osThreadCreate+0x54>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01c      	beq.n	8008612 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685c      	ldr	r4, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681d      	ldr	r5, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691e      	ldr	r6, [r3, #16]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff ffc8 	bl	8008580 <makeFreeRtosPriority>
 80085f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085fa:	9202      	str	r2, [sp, #8]
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	9100      	str	r1, [sp, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	4632      	mov	r2, r6
 8008604:	4629      	mov	r1, r5
 8008606:	4620      	mov	r0, r4
 8008608:	f000 f8ed 	bl	80087e6 <xTaskCreateStatic>
 800860c:	4603      	mov	r3, r0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e01c      	b.n	800864c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685c      	ldr	r4, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800861e:	b29e      	uxth	r6, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff ffaa 	bl	8008580 <makeFreeRtosPriority>
 800862c:	4602      	mov	r2, r0
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	9200      	str	r2, [sp, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	4632      	mov	r2, r6
 800863a:	4629      	mov	r1, r5
 800863c:	4620      	mov	r0, r4
 800863e:	f000 f92f 	bl	80088a0 <xTaskCreate>
 8008642:	4603      	mov	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d001      	beq.n	800864c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008656 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <osDelay+0x16>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	e000      	b.n	800866e <osDelay+0x18>
 800866c:	2301      	movs	r3, #1
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fa4c 	bl	8008b0c <vTaskDelay>
  
  return osOK;
 8008674:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f103 0208 	add.w	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f04f 32ff 	mov.w	r2, #4294967295
 8008696:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f103 0208 	add.w	r2, r3, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f103 0208 	add.w	r2, r3, #8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d103      	bne.n	8008740 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e00c      	b.n	800875a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3308      	adds	r3, #8
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e002      	b.n	800874e <vListInsert+0x2e>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	429a      	cmp	r2, r3
 8008758:	d2f6      	bcs.n	8008748 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6892      	ldr	r2, [r2, #8]
 80087a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6852      	ldr	r2, [r2, #4]
 80087b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d103      	bne.n	80087c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	1e5a      	subs	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b08e      	sub	sp, #56	; 0x38
 80087ea:	af04      	add	r7, sp, #16
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <xTaskCreateStatic+0x46>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800882c:	2354      	movs	r3, #84	; 0x54
 800882e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b54      	cmp	r3, #84	; 0x54
 8008834:	d00a      	beq.n	800884c <xTaskCreateStatic+0x66>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	61bb      	str	r3, [r7, #24]
}
 8008848:	bf00      	nop
 800884a:	e7fe      	b.n	800884a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800884c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01e      	beq.n	8008892 <xTaskCreateStatic+0xac>
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01b      	beq.n	8008892 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008862:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2202      	movs	r2, #2
 8008868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800886c:	2300      	movs	r3, #0
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	f107 0314 	add.w	r3, r7, #20
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f850 	bl	800892a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800888a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800888c:	f000 f8d4 	bl	8008a38 <prvAddNewTaskToReadyList>
 8008890:	e001      	b.n	8008896 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008896:	697b      	ldr	r3, [r7, #20]
	}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	; 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	; 0x30
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fec7 	bl	8009648 <pvPortMalloc>
 80088ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088c2:	2054      	movs	r0, #84	; 0x54
 80088c4:	f000 fec0 	bl	8009648 <pvPortMalloc>
 80088c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
 80088d6:	e005      	b.n	80088e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f000 ff81 	bl	80097e0 <vPortFree>
 80088de:	e001      	b.n	80088e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d017      	beq.n	800891a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	2300      	movs	r3, #0
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	9302      	str	r3, [sp, #8]
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f80e 	bl	800892a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800890e:	69f8      	ldr	r0, [r7, #28]
 8008910:	f000 f892 	bl	8008a38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008914:	2301      	movs	r3, #1
 8008916:	61bb      	str	r3, [r7, #24]
 8008918:	e002      	b.n	8008920 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008920:	69bb      	ldr	r3, [r7, #24]
	}
 8008922:	4618      	mov	r0, r3
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008942:	3b01      	subs	r3, #1
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <prvInitialiseNewTask+0x48>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	617b      	str	r3, [r7, #20]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01f      	beq.n	80089b8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e012      	b.n	80089a4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	3334      	adds	r3, #52	; 0x34
 800898e:	460a      	mov	r2, r1
 8008990:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d006      	beq.n	80089ac <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3301      	adds	r3, #1
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2b0f      	cmp	r3, #15
 80089a8:	d9e9      	bls.n	800897e <prvInitialiseNewTask+0x54>
 80089aa:	e000      	b.n	80089ae <prvInitialiseNewTask+0x84>
			{
				break;
 80089ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089b6:	e003      	b.n	80089c0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	2b06      	cmp	r3, #6
 80089c4:	d901      	bls.n	80089ca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089c6:	2306      	movs	r3, #6
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	2200      	movs	r2, #0
 80089da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	3304      	adds	r3, #4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fe6c 	bl	80086be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	3318      	adds	r3, #24
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fe67 	bl	80086be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	f1c3 0207 	rsb	r2, r3, #7
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2200      	movs	r2, #0
 8008a0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	69b8      	ldr	r0, [r7, #24]
 8008a1a:	f000 fc05 	bl	8009228 <pxPortInitialiseStack>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a30:	bf00      	nop
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a40:	f000 fd20 	bl	8009484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a44:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <prvAddNewTaskToReadyList+0xb8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	4a29      	ldr	r2, [pc, #164]	; (8008af0 <prvAddNewTaskToReadyList+0xb8>)
 8008a4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a4e:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <prvAddNewTaskToReadyList+0xbc>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <prvAddNewTaskToReadyList+0xbc>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a5c:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <prvAddNewTaskToReadyList+0xb8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d110      	bne.n	8008a86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a64:	f000 fabc 	bl	8008fe0 <prvInitialiseTaskLists>
 8008a68:	e00d      	b.n	8008a86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a6a:	4b23      	ldr	r3, [pc, #140]	; (8008af8 <prvAddNewTaskToReadyList+0xc0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a72:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <prvAddNewTaskToReadyList+0xbc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d802      	bhi.n	8008a86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a80:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <prvAddNewTaskToReadyList+0xbc>)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a86:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <prvAddNewTaskToReadyList+0xc4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	; (8008afc <prvAddNewTaskToReadyList+0xc4>)
 8008a8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	2201      	movs	r2, #1
 8008a96:	409a      	lsls	r2, r3
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <prvAddNewTaskToReadyList+0xc8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <prvAddNewTaskToReadyList+0xc8>)
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <prvAddNewTaskToReadyList+0xcc>)
 8008ab0:	441a      	add	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f7ff fe0d 	bl	80086d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008abe:	f000 fd11 	bl	80094e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <prvAddNewTaskToReadyList+0xc0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aca:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <prvAddNewTaskToReadyList+0xbc>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d207      	bcs.n	8008ae8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <prvAddNewTaskToReadyList+0xd0>)
 8008ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200005bc 	.word	0x200005bc
 8008af4:	200004bc 	.word	0x200004bc
 8008af8:	200005c8 	.word	0x200005c8
 8008afc:	200005d8 	.word	0x200005d8
 8008b00:	200005c4 	.word	0x200005c4
 8008b04:	200004c0 	.word	0x200004c0
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d017      	beq.n	8008b4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <vTaskDelay+0x60>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <vTaskDelay+0x30>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	60bb      	str	r3, [r7, #8]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b3c:	f000 f87a 	bl	8008c34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb0a 	bl	800915c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b48:	f000 f882 	bl	8008c50 <xTaskResumeAll>
 8008b4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <vTaskDelay+0x64>)
 8008b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200005e4 	.word	0x200005e4
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b82:	463a      	mov	r2, r7
 8008b84:	1d39      	adds	r1, r7, #4
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f7 fca2 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	9202      	str	r2, [sp, #8]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	460a      	mov	r2, r1
 8008ba2:	491e      	ldr	r1, [pc, #120]	; (8008c1c <vTaskStartScheduler+0xa8>)
 8008ba4:	481e      	ldr	r0, [pc, #120]	; (8008c20 <vTaskStartScheduler+0xac>)
 8008ba6:	f7ff fe1e 	bl	80087e6 <xTaskCreateStatic>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <vTaskStartScheduler+0xb0>)
 8008bae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <vTaskStartScheduler+0xb0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	e001      	b.n	8008bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d116      	bne.n	8008bf6 <vTaskStartScheduler+0x82>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	613b      	str	r3, [r7, #16]
}
 8008bda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bdc:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <vTaskStartScheduler+0xb4>)
 8008bde:	f04f 32ff 	mov.w	r2, #4294967295
 8008be2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008be4:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <vTaskStartScheduler+0xb8>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <vTaskStartScheduler+0xbc>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bf0:	f000 fba6 	bl	8009340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bf4:	e00e      	b.n	8008c14 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d10a      	bne.n	8008c14 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60fb      	str	r3, [r7, #12]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vTaskStartScheduler+0x9e>
}
 8008c14:	bf00      	nop
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	0800a648 	.word	0x0800a648
 8008c20:	08008fb1 	.word	0x08008fb1
 8008c24:	200005e0 	.word	0x200005e0
 8008c28:	200005dc 	.word	0x200005dc
 8008c2c:	200005c8 	.word	0x200005c8
 8008c30:	200005c0 	.word	0x200005c0

08008c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <vTaskSuspendAll+0x18>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4a03      	ldr	r2, [pc, #12]	; (8008c4c <vTaskSuspendAll+0x18>)
 8008c40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c42:	bf00      	nop
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	200005e4 	.word	0x200005e4

08008c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c5e:	4b41      	ldr	r3, [pc, #260]	; (8008d64 <xTaskResumeAll+0x114>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	603b      	str	r3, [r7, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c7c:	f000 fc02 	bl	8009484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c80:	4b38      	ldr	r3, [pc, #224]	; (8008d64 <xTaskResumeAll+0x114>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a37      	ldr	r2, [pc, #220]	; (8008d64 <xTaskResumeAll+0x114>)
 8008c88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c8a:	4b36      	ldr	r3, [pc, #216]	; (8008d64 <xTaskResumeAll+0x114>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d161      	bne.n	8008d56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c92:	4b35      	ldr	r3, [pc, #212]	; (8008d68 <xTaskResumeAll+0x118>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d05d      	beq.n	8008d56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c9a:	e02e      	b.n	8008cfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9c:	4b33      	ldr	r3, [pc, #204]	; (8008d6c <xTaskResumeAll+0x11c>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3318      	adds	r3, #24
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fd72 	bl	8008792 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fd6d 	bl	8008792 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	409a      	lsls	r2, r3
 8008cc0:	4b2b      	ldr	r3, [pc, #172]	; (8008d70 <xTaskResumeAll+0x120>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	4a2a      	ldr	r2, [pc, #168]	; (8008d70 <xTaskResumeAll+0x120>)
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <xTaskResumeAll+0x124>)
 8008cd8:	441a      	add	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7ff fcf9 	bl	80086d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <xTaskResumeAll+0x128>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008cf4:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <xTaskResumeAll+0x12c>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cfa:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <xTaskResumeAll+0x11c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1cc      	bne.n	8008c9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d08:	f000 fa08 	bl	800911c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d0c:	4b1c      	ldr	r3, [pc, #112]	; (8008d80 <xTaskResumeAll+0x130>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d010      	beq.n	8008d3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d18:	f000 f836 	bl	8008d88 <xTaskIncrementTick>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008d22:	4b16      	ldr	r3, [pc, #88]	; (8008d7c <xTaskResumeAll+0x12c>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1f1      	bne.n	8008d18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008d34:	4b12      	ldr	r3, [pc, #72]	; (8008d80 <xTaskResumeAll+0x130>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d3a:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <xTaskResumeAll+0x12c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d46:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <xTaskResumeAll+0x134>)
 8008d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d56:	f000 fbc5 	bl	80094e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	200005e4 	.word	0x200005e4
 8008d68:	200005bc 	.word	0x200005bc
 8008d6c:	2000057c 	.word	0x2000057c
 8008d70:	200005c4 	.word	0x200005c4
 8008d74:	200004c0 	.word	0x200004c0
 8008d78:	200004bc 	.word	0x200004bc
 8008d7c:	200005d0 	.word	0x200005d0
 8008d80:	200005cc 	.word	0x200005cc
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d92:	4b4e      	ldr	r3, [pc, #312]	; (8008ecc <xTaskIncrementTick+0x144>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 808e 	bne.w	8008eb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d9c:	4b4c      	ldr	r3, [pc, #304]	; (8008ed0 <xTaskIncrementTick+0x148>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008da4:	4a4a      	ldr	r2, [pc, #296]	; (8008ed0 <xTaskIncrementTick+0x148>)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d120      	bne.n	8008df2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008db0:	4b48      	ldr	r3, [pc, #288]	; (8008ed4 <xTaskIncrementTick+0x14c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <xTaskIncrementTick+0x46>
 8008dd0:	4b40      	ldr	r3, [pc, #256]	; (8008ed4 <xTaskIncrementTick+0x14c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	4b40      	ldr	r3, [pc, #256]	; (8008ed8 <xTaskIncrementTick+0x150>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a3e      	ldr	r2, [pc, #248]	; (8008ed4 <xTaskIncrementTick+0x14c>)
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	4a3e      	ldr	r2, [pc, #248]	; (8008ed8 <xTaskIncrementTick+0x150>)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4b3d      	ldr	r3, [pc, #244]	; (8008edc <xTaskIncrementTick+0x154>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	4a3c      	ldr	r2, [pc, #240]	; (8008edc <xTaskIncrementTick+0x154>)
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	f000 f995 	bl	800911c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008df2:	4b3b      	ldr	r3, [pc, #236]	; (8008ee0 <xTaskIncrementTick+0x158>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d348      	bcc.n	8008e8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dfc:	4b35      	ldr	r3, [pc, #212]	; (8008ed4 <xTaskIncrementTick+0x14c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e06:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <xTaskIncrementTick+0x158>)
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	601a      	str	r2, [r3, #0]
					break;
 8008e0e:	e03e      	b.n	8008e8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e10:	4b30      	ldr	r3, [pc, #192]	; (8008ed4 <xTaskIncrementTick+0x14c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d203      	bcs.n	8008e30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e28:	4a2d      	ldr	r2, [pc, #180]	; (8008ee0 <xTaskIncrementTick+0x158>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e2e:	e02e      	b.n	8008e8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fcac 	bl	8008792 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	3318      	adds	r3, #24
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fca3 	bl	8008792 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	2201      	movs	r2, #1
 8008e52:	409a      	lsls	r2, r3
 8008e54:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <xTaskIncrementTick+0x15c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	4a22      	ldr	r2, [pc, #136]	; (8008ee4 <xTaskIncrementTick+0x15c>)
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <xTaskIncrementTick+0x160>)
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f7ff fc2f 	bl	80086d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <xTaskIncrementTick+0x164>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3b9      	bcc.n	8008dfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e8c:	e7b6      	b.n	8008dfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e8e:	4b17      	ldr	r3, [pc, #92]	; (8008eec <xTaskIncrementTick+0x164>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4914      	ldr	r1, [pc, #80]	; (8008ee8 <xTaskIncrementTick+0x160>)
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d901      	bls.n	8008eaa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008eaa:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <xTaskIncrementTick+0x168>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e004      	b.n	8008ec2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008eb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <xTaskIncrementTick+0x16c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	4a0d      	ldr	r2, [pc, #52]	; (8008ef4 <xTaskIncrementTick+0x16c>)
 8008ec0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ec2:	697b      	ldr	r3, [r7, #20]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	200005e4 	.word	0x200005e4
 8008ed0:	200005c0 	.word	0x200005c0
 8008ed4:	20000574 	.word	0x20000574
 8008ed8:	20000578 	.word	0x20000578
 8008edc:	200005d4 	.word	0x200005d4
 8008ee0:	200005dc 	.word	0x200005dc
 8008ee4:	200005c4 	.word	0x200005c4
 8008ee8:	200004c0 	.word	0x200004c0
 8008eec:	200004bc 	.word	0x200004bc
 8008ef0:	200005d0 	.word	0x200005d0
 8008ef4:	200005cc 	.word	0x200005cc

08008ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008efe:	4b27      	ldr	r3, [pc, #156]	; (8008f9c <vTaskSwitchContext+0xa4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f06:	4b26      	ldr	r3, [pc, #152]	; (8008fa0 <vTaskSwitchContext+0xa8>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f0c:	e03f      	b.n	8008f8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008f0e:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <vTaskSwitchContext+0xa8>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f14:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <vTaskSwitchContext+0xac>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	fab3 f383 	clz	r3, r3
 8008f20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	f1c3 031f 	rsb	r3, r3, #31
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	491f      	ldr	r1, [pc, #124]	; (8008fa8 <vTaskSwitchContext+0xb0>)
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <vTaskSwitchContext+0x5a>
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a12      	ldr	r2, [pc, #72]	; (8008fa8 <vTaskSwitchContext+0xb0>)
 8008f60:	4413      	add	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	605a      	str	r2, [r3, #4]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	3308      	adds	r3, #8
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d104      	bne.n	8008f84 <vTaskSwitchContext+0x8c>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	4a08      	ldr	r2, [pc, #32]	; (8008fac <vTaskSwitchContext+0xb4>)
 8008f8c:	6013      	str	r3, [r2, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	200005e4 	.word	0x200005e4
 8008fa0:	200005d0 	.word	0x200005d0
 8008fa4:	200005c4 	.word	0x200005c4
 8008fa8:	200004c0 	.word	0x200004c0
 8008fac:	200004bc 	.word	0x200004bc

08008fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fb8:	f000 f852 	bl	8009060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <prvIdleTask+0x28>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d9f9      	bls.n	8008fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <prvIdleTask+0x2c>)
 8008fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fd4:	e7f0      	b.n	8008fb8 <prvIdleTask+0x8>
 8008fd6:	bf00      	nop
 8008fd8:	200004c0 	.word	0x200004c0
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	e00c      	b.n	8009006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4a12      	ldr	r2, [pc, #72]	; (8009040 <prvInitialiseTaskLists+0x60>)
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff fb3f 	bl	800867e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3301      	adds	r3, #1
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b06      	cmp	r3, #6
 800900a:	d9ef      	bls.n	8008fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800900c:	480d      	ldr	r0, [pc, #52]	; (8009044 <prvInitialiseTaskLists+0x64>)
 800900e:	f7ff fb36 	bl	800867e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009012:	480d      	ldr	r0, [pc, #52]	; (8009048 <prvInitialiseTaskLists+0x68>)
 8009014:	f7ff fb33 	bl	800867e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009018:	480c      	ldr	r0, [pc, #48]	; (800904c <prvInitialiseTaskLists+0x6c>)
 800901a:	f7ff fb30 	bl	800867e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800901e:	480c      	ldr	r0, [pc, #48]	; (8009050 <prvInitialiseTaskLists+0x70>)
 8009020:	f7ff fb2d 	bl	800867e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009024:	480b      	ldr	r0, [pc, #44]	; (8009054 <prvInitialiseTaskLists+0x74>)
 8009026:	f7ff fb2a 	bl	800867e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800902a:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <prvInitialiseTaskLists+0x78>)
 800902c:	4a05      	ldr	r2, [pc, #20]	; (8009044 <prvInitialiseTaskLists+0x64>)
 800902e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <prvInitialiseTaskLists+0x7c>)
 8009032:	4a05      	ldr	r2, [pc, #20]	; (8009048 <prvInitialiseTaskLists+0x68>)
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	200004c0 	.word	0x200004c0
 8009044:	2000054c 	.word	0x2000054c
 8009048:	20000560 	.word	0x20000560
 800904c:	2000057c 	.word	0x2000057c
 8009050:	20000590 	.word	0x20000590
 8009054:	200005a8 	.word	0x200005a8
 8009058:	20000574 	.word	0x20000574
 800905c:	20000578 	.word	0x20000578

08009060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009066:	e019      	b.n	800909c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009068:	f000 fa0c 	bl	8009484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <prvCheckTasksWaitingTermination+0x50>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3304      	adds	r3, #4
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff fb8a 	bl	8008792 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <prvCheckTasksWaitingTermination+0x54>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3b01      	subs	r3, #1
 8009084:	4a0b      	ldr	r2, [pc, #44]	; (80090b4 <prvCheckTasksWaitingTermination+0x54>)
 8009086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3b01      	subs	r3, #1
 800908e:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 8009090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009092:	f000 fa27 	bl	80094e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f810 	bl	80090bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e1      	bne.n	8009068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000590 	.word	0x20000590
 80090b4:	200005bc 	.word	0x200005bc
 80090b8:	200005a4 	.word	0x200005a4

080090bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d108      	bne.n	80090e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fb84 	bl	80097e0 <vPortFree>
				vPortFree( pxTCB );
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fb81 	bl	80097e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090de:	e018      	b.n	8009112 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d103      	bne.n	80090f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb78 	bl	80097e0 <vPortFree>
	}
 80090f0:	e00f      	b.n	8009112 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d00a      	beq.n	8009112 <prvDeleteTCB+0x56>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	60fb      	str	r3, [r7, #12]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <prvDeleteTCB+0x54>
	}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009122:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <prvResetNextTaskUnblockTime+0x38>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <prvResetNextTaskUnblockTime+0x3c>)
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009134:	e008      	b.n	8009148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009136:	4b07      	ldr	r3, [pc, #28]	; (8009154 <prvResetNextTaskUnblockTime+0x38>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	4a04      	ldr	r2, [pc, #16]	; (8009158 <prvResetNextTaskUnblockTime+0x3c>)
 8009146:	6013      	str	r3, [r2, #0]
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	20000574 	.word	0x20000574
 8009158:	200005dc 	.word	0x200005dc

0800915c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009166:	4b29      	ldr	r3, [pc, #164]	; (800920c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800916c:	4b28      	ldr	r3, [pc, #160]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3304      	adds	r3, #4
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff fb0d 	bl	8008792 <uxListRemove>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800917e:	4b24      	ldr	r3, [pc, #144]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	2201      	movs	r2, #1
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	43da      	mvns	r2, r3
 800918c:	4b21      	ldr	r3, [pc, #132]	; (8009214 <prvAddCurrentTaskToDelayedList+0xb8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4013      	ands	r3, r2
 8009192:	4a20      	ldr	r2, [pc, #128]	; (8009214 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009194:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d10a      	bne.n	80091b4 <prvAddCurrentTaskToDelayedList+0x58>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a4:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	481a      	ldr	r0, [pc, #104]	; (8009218 <prvAddCurrentTaskToDelayedList+0xbc>)
 80091ae:	f7ff fa93 	bl	80086d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091b2:	e026      	b.n	8009202 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091bc:	4b14      	ldr	r3, [pc, #80]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d209      	bcs.n	80091e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091cc:	4b13      	ldr	r3, [pc, #76]	; (800921c <prvAddCurrentTaskToDelayedList+0xc0>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7ff faa1 	bl	8008720 <vListInsert>
}
 80091de:	e010      	b.n	8009202 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <prvAddCurrentTaskToDelayedList+0xc4>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7ff fa97 	bl	8008720 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d202      	bcs.n	8009202 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091fc:	4a09      	ldr	r2, [pc, #36]	; (8009224 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6013      	str	r3, [r2, #0]
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	200005c0 	.word	0x200005c0
 8009210:	200004bc 	.word	0x200004bc
 8009214:	200005c4 	.word	0x200005c4
 8009218:	200005a8 	.word	0x200005a8
 800921c:	20000578 	.word	0x20000578
 8009220:	20000574 	.word	0x20000574
 8009224:	200005dc 	.word	0x200005dc

08009228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3b04      	subs	r3, #4
 8009238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3b04      	subs	r3, #4
 8009246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f023 0201 	bic.w	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3b04      	subs	r3, #4
 8009256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009258:	4a0c      	ldr	r2, [pc, #48]	; (800928c <pxPortInitialiseStack+0x64>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3b14      	subs	r3, #20
 8009262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3b04      	subs	r3, #4
 800926e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f06f 0202 	mvn.w	r2, #2
 8009276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3b20      	subs	r3, #32
 800927c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	08009291 	.word	0x08009291

08009290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800929a:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <prvTaskExitError+0x54>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d00a      	beq.n	80092ba <prvTaskExitError+0x2a>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	60fb      	str	r3, [r7, #12]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <prvTaskExitError+0x28>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	60bb      	str	r3, [r7, #8]
}
 80092cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092ce:	bf00      	nop
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0fc      	beq.n	80092d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	20000098 	.word	0x20000098
	...

080092f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <pxCurrentTCBConst2>)
 80092f2:	6819      	ldr	r1, [r3, #0]
 80092f4:	6808      	ldr	r0, [r1, #0]
 80092f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fa:	f380 8809 	msr	PSP, r0
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f04f 0000 	mov.w	r0, #0
 8009306:	f380 8811 	msr	BASEPRI, r0
 800930a:	4770      	bx	lr
 800930c:	f3af 8000 	nop.w

08009310 <pxCurrentTCBConst2>:
 8009310:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop

08009318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009318:	4808      	ldr	r0, [pc, #32]	; (800933c <prvPortStartFirstTask+0x24>)
 800931a:	6800      	ldr	r0, [r0, #0]
 800931c:	6800      	ldr	r0, [r0, #0]
 800931e:	f380 8808 	msr	MSP, r0
 8009322:	f04f 0000 	mov.w	r0, #0
 8009326:	f380 8814 	msr	CONTROL, r0
 800932a:	b662      	cpsie	i
 800932c:	b661      	cpsie	f
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	df00      	svc	0
 8009338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800933a:	bf00      	nop
 800933c:	e000ed08 	.word	0xe000ed08

08009340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009346:	4b46      	ldr	r3, [pc, #280]	; (8009460 <xPortStartScheduler+0x120>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a46      	ldr	r2, [pc, #280]	; (8009464 <xPortStartScheduler+0x124>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d10a      	bne.n	8009366 <xPortStartScheduler+0x26>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	613b      	str	r3, [r7, #16]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009366:	4b3e      	ldr	r3, [pc, #248]	; (8009460 <xPortStartScheduler+0x120>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3f      	ldr	r2, [pc, #252]	; (8009468 <xPortStartScheduler+0x128>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d10a      	bne.n	8009386 <xPortStartScheduler+0x46>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60fb      	str	r3, [r7, #12]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009386:	4b39      	ldr	r3, [pc, #228]	; (800946c <xPortStartScheduler+0x12c>)
 8009388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	22ff      	movs	r2, #255	; 0xff
 8009396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	4b31      	ldr	r3, [pc, #196]	; (8009470 <xPortStartScheduler+0x130>)
 80093ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ae:	4b31      	ldr	r3, [pc, #196]	; (8009474 <xPortStartScheduler+0x134>)
 80093b0:	2207      	movs	r2, #7
 80093b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093b4:	e009      	b.n	80093ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093b6:	4b2f      	ldr	r3, [pc, #188]	; (8009474 <xPortStartScheduler+0x134>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	4a2d      	ldr	r2, [pc, #180]	; (8009474 <xPortStartScheduler+0x134>)
 80093be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b80      	cmp	r3, #128	; 0x80
 80093d4:	d0ef      	beq.n	80093b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093d6:	4b27      	ldr	r3, [pc, #156]	; (8009474 <xPortStartScheduler+0x134>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1c3 0307 	rsb	r3, r3, #7
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d00a      	beq.n	80093f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	60bb      	str	r3, [r7, #8]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093f8:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <xPortStartScheduler+0x134>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <xPortStartScheduler+0x134>)
 8009400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009402:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <xPortStartScheduler+0x134>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800940a:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <xPortStartScheduler+0x134>)
 800940c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	b2da      	uxtb	r2, r3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009416:	4b18      	ldr	r3, [pc, #96]	; (8009478 <xPortStartScheduler+0x138>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a17      	ldr	r2, [pc, #92]	; (8009478 <xPortStartScheduler+0x138>)
 800941c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <xPortStartScheduler+0x138>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a14      	ldr	r2, [pc, #80]	; (8009478 <xPortStartScheduler+0x138>)
 8009428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800942c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800942e:	f000 f8dd 	bl	80095ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009432:	4b12      	ldr	r3, [pc, #72]	; (800947c <xPortStartScheduler+0x13c>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009438:	f000 f8fc 	bl	8009634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <xPortStartScheduler+0x140>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0f      	ldr	r2, [pc, #60]	; (8009480 <xPortStartScheduler+0x140>)
 8009442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009448:	f7ff ff66 	bl	8009318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800944c:	f7ff fd54 	bl	8008ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8009450:	f7ff ff1e 	bl	8009290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	e000ed00 	.word	0xe000ed00
 8009464:	410fc271 	.word	0x410fc271
 8009468:	410fc270 	.word	0x410fc270
 800946c:	e000e400 	.word	0xe000e400
 8009470:	200005e8 	.word	0x200005e8
 8009474:	200005ec 	.word	0x200005ec
 8009478:	e000ed20 	.word	0xe000ed20
 800947c:	20000098 	.word	0x20000098
 8009480:	e000ef34 	.word	0xe000ef34

08009484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	607b      	str	r3, [r7, #4]
}
 800949c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800949e:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <vPortEnterCritical+0x58>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <vPortEnterCritical+0x58>)
 80094a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <vPortEnterCritical+0x58>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10f      	bne.n	80094d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <vPortEnterCritical+0x5c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	603b      	str	r3, [r7, #0]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <vPortEnterCritical+0x4a>
	}
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000098 	.word	0x20000098
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094ea:	4b12      	ldr	r3, [pc, #72]	; (8009534 <vPortExitCritical+0x50>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <vPortExitCritical+0x24>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	607b      	str	r3, [r7, #4]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vPortExitCritical+0x50>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3b01      	subs	r3, #1
 800950e:	4a09      	ldr	r2, [pc, #36]	; (8009534 <vPortExitCritical+0x50>)
 8009510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009512:	4b08      	ldr	r3, [pc, #32]	; (8009534 <vPortExitCritical+0x50>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d105      	bne.n	8009526 <vPortExitCritical+0x42>
 800951a:	2300      	movs	r3, #0
 800951c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000098 	.word	0x20000098
	...

08009540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009540:	f3ef 8009 	mrs	r0, PSP
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <pxCurrentTCBConst>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	f01e 0f10 	tst.w	lr, #16
 8009550:	bf08      	it	eq
 8009552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	6010      	str	r0, [r2, #0]
 800955c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009564:	f380 8811 	msr	BASEPRI, r0
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f7ff fcc2 	bl	8008ef8 <vTaskSwitchContext>
 8009574:	f04f 0000 	mov.w	r0, #0
 8009578:	f380 8811 	msr	BASEPRI, r0
 800957c:	bc09      	pop	{r0, r3}
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	6808      	ldr	r0, [r1, #0]
 8009582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009586:	f01e 0f10 	tst.w	lr, #16
 800958a:	bf08      	it	eq
 800958c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009590:	f380 8809 	msr	PSP, r0
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w

080095a0 <pxCurrentTCBConst>:
 80095a0:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
}
 80095c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095c2:	f7ff fbe1 	bl	8008d88 <xTaskIncrementTick>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <SysTick_Handler+0x40>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f383 8811 	msr	BASEPRI, r3
}
 80095de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <vPortSetupTimerInterrupt+0x34>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095f6:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <vPortSetupTimerInterrupt+0x38>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <vPortSetupTimerInterrupt+0x3c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a0a      	ldr	r2, [pc, #40]	; (800962c <vPortSetupTimerInterrupt+0x40>)
 8009602:	fba2 2303 	umull	r2, r3, r2, r3
 8009606:	099b      	lsrs	r3, r3, #6
 8009608:	4a09      	ldr	r2, [pc, #36]	; (8009630 <vPortSetupTimerInterrupt+0x44>)
 800960a:	3b01      	subs	r3, #1
 800960c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800960e:	4b04      	ldr	r3, [pc, #16]	; (8009620 <vPortSetupTimerInterrupt+0x34>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	e000e010 	.word	0xe000e010
 8009624:	e000e018 	.word	0xe000e018
 8009628:	20000000 	.word	0x20000000
 800962c:	10624dd3 	.word	0x10624dd3
 8009630:	e000e014 	.word	0xe000e014

08009634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009644 <vPortEnableVFP+0x10>
 8009638:	6801      	ldr	r1, [r0, #0]
 800963a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800963e:	6001      	str	r1, [r0, #0]
 8009640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009642:	bf00      	nop
 8009644:	e000ed88 	.word	0xe000ed88

08009648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	; 0x28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009654:	f7ff faee 	bl	8008c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009658:	4b5b      	ldr	r3, [pc, #364]	; (80097c8 <pvPortMalloc+0x180>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009660:	f000 f920 	bl	80098a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009664:	4b59      	ldr	r3, [pc, #356]	; (80097cc <pvPortMalloc+0x184>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 8093 	bne.w	8009798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01d      	beq.n	80096b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009678:	2208      	movs	r2, #8
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4413      	add	r3, r2
 800967e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b00      	cmp	r3, #0
 8009688:	d014      	beq.n	80096b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f023 0307 	bic.w	r3, r3, #7
 8009690:	3308      	adds	r3, #8
 8009692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <pvPortMalloc+0x6c>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	617b      	str	r3, [r7, #20]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d06e      	beq.n	8009798 <pvPortMalloc+0x150>
 80096ba:	4b45      	ldr	r3, [pc, #276]	; (80097d0 <pvPortMalloc+0x188>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d869      	bhi.n	8009798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096c4:	4b43      	ldr	r3, [pc, #268]	; (80097d4 <pvPortMalloc+0x18c>)
 80096c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096c8:	4b42      	ldr	r3, [pc, #264]	; (80097d4 <pvPortMalloc+0x18c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ce:	e004      	b.n	80096da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d903      	bls.n	80096ec <pvPortMalloc+0xa4>
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1f1      	bne.n	80096d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096ec:	4b36      	ldr	r3, [pc, #216]	; (80097c8 <pvPortMalloc+0x180>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d050      	beq.n	8009798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2208      	movs	r2, #8
 80096fc:	4413      	add	r3, r2
 80096fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	1ad2      	subs	r2, r2, r3
 8009710:	2308      	movs	r3, #8
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	429a      	cmp	r2, r3
 8009716:	d91f      	bls.n	8009758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4413      	add	r3, r2
 800971e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <pvPortMalloc+0xf8>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	613b      	str	r3, [r7, #16]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	1ad2      	subs	r2, r2, r3
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009752:	69b8      	ldr	r0, [r7, #24]
 8009754:	f000 f908 	bl	8009968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009758:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <pvPortMalloc+0x188>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	4a1b      	ldr	r2, [pc, #108]	; (80097d0 <pvPortMalloc+0x188>)
 8009764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009766:	4b1a      	ldr	r3, [pc, #104]	; (80097d0 <pvPortMalloc+0x188>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	4b1b      	ldr	r3, [pc, #108]	; (80097d8 <pvPortMalloc+0x190>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d203      	bcs.n	800977a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009772:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <pvPortMalloc+0x188>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a18      	ldr	r2, [pc, #96]	; (80097d8 <pvPortMalloc+0x190>)
 8009778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <pvPortMalloc+0x184>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	431a      	orrs	r2, r3
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <pvPortMalloc+0x194>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	4a11      	ldr	r2, [pc, #68]	; (80097dc <pvPortMalloc+0x194>)
 8009796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009798:	f7ff fa5a 	bl	8008c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <pvPortMalloc+0x174>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	60fb      	str	r3, [r7, #12]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <pvPortMalloc+0x172>
	return pvReturn;
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3728      	adds	r7, #40	; 0x28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200041f8 	.word	0x200041f8
 80097cc:	2000420c 	.word	0x2000420c
 80097d0:	200041fc 	.word	0x200041fc
 80097d4:	200041f0 	.word	0x200041f0
 80097d8:	20004200 	.word	0x20004200
 80097dc:	20004204 	.word	0x20004204

080097e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d04d      	beq.n	800988e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097f2:	2308      	movs	r3, #8
 80097f4:	425b      	negs	r3, r3
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4413      	add	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	4b24      	ldr	r3, [pc, #144]	; (8009898 <vPortFree+0xb8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4013      	ands	r3, r2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <vPortFree+0x44>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60fb      	str	r3, [r7, #12]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <vPortFree+0x62>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	60bb      	str	r3, [r7, #8]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	4b14      	ldr	r3, [pc, #80]	; (8009898 <vPortFree+0xb8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01e      	beq.n	800988e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11a      	bne.n	800988e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <vPortFree+0xb8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	43db      	mvns	r3, r3
 8009862:	401a      	ands	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009868:	f7ff f9e4 	bl	8008c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <vPortFree+0xbc>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4413      	add	r3, r2
 8009876:	4a09      	ldr	r2, [pc, #36]	; (800989c <vPortFree+0xbc>)
 8009878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f000 f874 	bl	8009968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <vPortFree+0xc0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	4a06      	ldr	r2, [pc, #24]	; (80098a0 <vPortFree+0xc0>)
 8009888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800988a:	f7ff f9e1 	bl	8008c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800988e:	bf00      	nop
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	2000420c 	.word	0x2000420c
 800989c:	200041fc 	.word	0x200041fc
 80098a0:	20004208 	.word	0x20004208

080098a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80098ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098b0:	4b27      	ldr	r3, [pc, #156]	; (8009950 <prvHeapInit+0xac>)
 80098b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3307      	adds	r3, #7
 80098c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	4a1f      	ldr	r2, [pc, #124]	; (8009950 <prvHeapInit+0xac>)
 80098d4:	4413      	add	r3, r2
 80098d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098dc:	4a1d      	ldr	r2, [pc, #116]	; (8009954 <prvHeapInit+0xb0>)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <prvHeapInit+0xb0>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4413      	add	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098f0:	2208      	movs	r2, #8
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0307 	bic.w	r3, r3, #7
 80098fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a15      	ldr	r2, [pc, #84]	; (8009958 <prvHeapInit+0xb4>)
 8009904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <prvHeapInit+0xb4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800990e:	4b12      	ldr	r3, [pc, #72]	; (8009958 <prvHeapInit+0xb4>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009924:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <prvHeapInit+0xb4>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4a0a      	ldr	r2, [pc, #40]	; (800995c <prvHeapInit+0xb8>)
 8009932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4a09      	ldr	r2, [pc, #36]	; (8009960 <prvHeapInit+0xbc>)
 800993a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800993c:	4b09      	ldr	r3, [pc, #36]	; (8009964 <prvHeapInit+0xc0>)
 800993e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	200005f0 	.word	0x200005f0
 8009954:	200041f0 	.word	0x200041f0
 8009958:	200041f8 	.word	0x200041f8
 800995c:	20004200 	.word	0x20004200
 8009960:	200041fc 	.word	0x200041fc
 8009964:	2000420c 	.word	0x2000420c

08009968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009970:	4b28      	ldr	r3, [pc, #160]	; (8009a14 <prvInsertBlockIntoFreeList+0xac>)
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e002      	b.n	800997c <prvInsertBlockIntoFreeList+0x14>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d8f7      	bhi.n	8009976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	4413      	add	r3, r2
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	d108      	bne.n	80099aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	441a      	add	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d118      	bne.n	80099f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b15      	ldr	r3, [pc, #84]	; (8009a18 <prvInsertBlockIntoFreeList+0xb0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d00d      	beq.n	80099e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e008      	b.n	80099f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099e6:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <prvInsertBlockIntoFreeList+0xb0>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e003      	b.n	80099f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d002      	beq.n	8009a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a06:	bf00      	nop
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	200041f0 	.word	0x200041f0
 8009a18:	200041f8 	.word	0x200041f8

08009a1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a20:	2200      	movs	r2, #0
 8009a22:	4912      	ldr	r1, [pc, #72]	; (8009a6c <MX_USB_DEVICE_Init+0x50>)
 8009a24:	4812      	ldr	r0, [pc, #72]	; (8009a70 <MX_USB_DEVICE_Init+0x54>)
 8009a26:	f7fd fab9 	bl	8006f9c <USBD_Init>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a30:	f7f7 fd5a 	bl	80014e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a34:	490f      	ldr	r1, [pc, #60]	; (8009a74 <MX_USB_DEVICE_Init+0x58>)
 8009a36:	480e      	ldr	r0, [pc, #56]	; (8009a70 <MX_USB_DEVICE_Init+0x54>)
 8009a38:	f7fd fae0 	bl	8006ffc <USBD_RegisterClass>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a42:	f7f7 fd51 	bl	80014e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a46:	490c      	ldr	r1, [pc, #48]	; (8009a78 <MX_USB_DEVICE_Init+0x5c>)
 8009a48:	4809      	ldr	r0, [pc, #36]	; (8009a70 <MX_USB_DEVICE_Init+0x54>)
 8009a4a:	f7fd fa17 	bl	8006e7c <USBD_CDC_RegisterInterface>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a54:	f7f7 fd48 	bl	80014e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a58:	4805      	ldr	r0, [pc, #20]	; (8009a70 <MX_USB_DEVICE_Init+0x54>)
 8009a5a:	f7fd fb05 	bl	8007068 <USBD_Start>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a64:	f7f7 fd40 	bl	80014e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a68:	bf00      	nop
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	200000b0 	.word	0x200000b0
 8009a70:	20004210 	.word	0x20004210
 8009a74:	20000018 	.word	0x20000018
 8009a78:	2000009c 	.word	0x2000009c

08009a7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a80:	2200      	movs	r2, #0
 8009a82:	4905      	ldr	r1, [pc, #20]	; (8009a98 <CDC_Init_FS+0x1c>)
 8009a84:	4805      	ldr	r0, [pc, #20]	; (8009a9c <CDC_Init_FS+0x20>)
 8009a86:	f7fd fa13 	bl	8006eb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a8a:	4905      	ldr	r1, [pc, #20]	; (8009aa0 <CDC_Init_FS+0x24>)
 8009a8c:	4803      	ldr	r0, [pc, #12]	; (8009a9c <CDC_Init_FS+0x20>)
 8009a8e:	f7fd fa31 	bl	8006ef4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20004cec 	.word	0x20004cec
 8009a9c:	20004210 	.word	0x20004210
 8009aa0:	200044ec 	.word	0x200044ec

08009aa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009aa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b23      	cmp	r3, #35	; 0x23
 8009ac8:	f200 8083 	bhi.w	8009bd2 <CDC_Control_FS+0x11e>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <CDC_Control_FS+0x20>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009bd3 	.word	0x08009bd3
 8009ad8:	08009bd3 	.word	0x08009bd3
 8009adc:	08009bd3 	.word	0x08009bd3
 8009ae0:	08009bd3 	.word	0x08009bd3
 8009ae4:	08009bd3 	.word	0x08009bd3
 8009ae8:	08009bd3 	.word	0x08009bd3
 8009aec:	08009bd3 	.word	0x08009bd3
 8009af0:	08009bd3 	.word	0x08009bd3
 8009af4:	08009bd3 	.word	0x08009bd3
 8009af8:	08009bd3 	.word	0x08009bd3
 8009afc:	08009bd3 	.word	0x08009bd3
 8009b00:	08009bd3 	.word	0x08009bd3
 8009b04:	08009bd3 	.word	0x08009bd3
 8009b08:	08009bd3 	.word	0x08009bd3
 8009b0c:	08009bd3 	.word	0x08009bd3
 8009b10:	08009bd3 	.word	0x08009bd3
 8009b14:	08009bd3 	.word	0x08009bd3
 8009b18:	08009bd3 	.word	0x08009bd3
 8009b1c:	08009bd3 	.word	0x08009bd3
 8009b20:	08009bd3 	.word	0x08009bd3
 8009b24:	08009bd3 	.word	0x08009bd3
 8009b28:	08009bd3 	.word	0x08009bd3
 8009b2c:	08009bd3 	.word	0x08009bd3
 8009b30:	08009bd3 	.word	0x08009bd3
 8009b34:	08009bd3 	.word	0x08009bd3
 8009b38:	08009bd3 	.word	0x08009bd3
 8009b3c:	08009bd3 	.word	0x08009bd3
 8009b40:	08009bd3 	.word	0x08009bd3
 8009b44:	08009bd3 	.word	0x08009bd3
 8009b48:	08009bd3 	.word	0x08009bd3
 8009b4c:	08009bd3 	.word	0x08009bd3
 8009b50:	08009bd3 	.word	0x08009bd3
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b97 	.word	0x08009b97
 8009b5c:	08009bd3 	.word	0x08009bd3
 8009b60:	08009bd3 	.word	0x08009bd3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	temp[0]=pbuf[0];
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781a      	ldrb	r2, [r3, #0]
 8009b68:	4b1e      	ldr	r3, [pc, #120]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b6a:	701a      	strb	r2, [r3, #0]
    	temp[1]=pbuf[1];
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	785a      	ldrb	r2, [r3, #1]
 8009b70:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b72:	705a      	strb	r2, [r3, #1]
    	temp[2]=pbuf[2];
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	789a      	ldrb	r2, [r3, #2]
 8009b78:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b7a:	709a      	strb	r2, [r3, #2]
    	temp[3]=pbuf[3];
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	78da      	ldrb	r2, [r3, #3]
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b82:	70da      	strb	r2, [r3, #3]
    	temp[4]=pbuf[4];
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	791a      	ldrb	r2, [r3, #4]
 8009b88:	4b16      	ldr	r3, [pc, #88]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b8a:	711a      	strb	r2, [r3, #4]
    	temp[5]=pbuf[5];
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	795a      	ldrb	r2, [r3, #5]
 8009b90:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b92:	715a      	strb	r2, [r3, #5]
    break;
 8009b94:	e01e      	b.n	8009bd4 <CDC_Control_FS+0x120>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=temp[0];
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <CDC_Control_FS+0x130>)
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=temp[1];
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a10      	ldr	r2, [pc, #64]	; (8009be4 <CDC_Control_FS+0x130>)
 8009ba4:	7852      	ldrb	r2, [r2, #1]
 8009ba6:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=temp[2];
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	3302      	adds	r3, #2
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <CDC_Control_FS+0x130>)
 8009bae:	7892      	ldrb	r2, [r2, #2]
 8009bb0:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=temp[3];
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	3303      	adds	r3, #3
 8009bb6:	4a0b      	ldr	r2, [pc, #44]	; (8009be4 <CDC_Control_FS+0x130>)
 8009bb8:	78d2      	ldrb	r2, [r2, #3]
 8009bba:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=temp[4];
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4a08      	ldr	r2, [pc, #32]	; (8009be4 <CDC_Control_FS+0x130>)
 8009bc2:	7912      	ldrb	r2, [r2, #4]
 8009bc4:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=temp[5];
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3305      	adds	r3, #5
 8009bca:	4a06      	ldr	r2, [pc, #24]	; (8009be4 <CDC_Control_FS+0x130>)
 8009bcc:	7952      	ldrb	r2, [r2, #5]
 8009bce:	701a      	strb	r2, [r3, #0]
    break;
 8009bd0:	e000      	b.n	8009bd4 <CDC_Control_FS+0x120>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bd2:	bf00      	nop
  }

  return (USBD_OK);
 8009bd4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	200054ec 	.word	0x200054ec

08009be8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4808      	ldr	r0, [pc, #32]	; (8009c18 <CDC_Receive_FS+0x30>)
 8009bf6:	f7fd f97d 	bl	8006ef4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bfa:	4807      	ldr	r0, [pc, #28]	; (8009c18 <CDC_Receive_FS+0x30>)
 8009bfc:	f7fd f998 	bl	8006f30 <USBD_CDC_ReceivePacket>
  USBRxHandler(UserRxBufferFS, *Len);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4619      	mov	r1, r3
 8009c08:	4804      	ldr	r0, [pc, #16]	; (8009c1c <CDC_Receive_FS+0x34>)
 8009c0a:	f7f6 fc7d 	bl	8000508 <USBRxHandler>
  return (USBD_OK);
 8009c0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20004210 	.word	0x20004210
 8009c1c:	200044ec 	.word	0x200044ec

08009c20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	6039      	str	r1, [r7, #0]
 8009c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2212      	movs	r2, #18
 8009c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c56:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	200000cc 	.word	0x200000cc

08009c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2204      	movs	r2, #4
 8009c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	200000e0 	.word	0x200000e0

08009c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d105      	bne.n	8009caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	4907      	ldr	r1, [pc, #28]	; (8009cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ca2:	4808      	ldr	r0, [pc, #32]	; (8009cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ca4:	f7fe fb8c 	bl	80083c0 <USBD_GetString>
 8009ca8:	e004      	b.n	8009cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4904      	ldr	r1, [pc, #16]	; (8009cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cae:	4805      	ldr	r0, [pc, #20]	; (8009cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cb0:	f7fe fb86 	bl	80083c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	200054f4 	.word	0x200054f4
 8009cc4:	0800a650 	.word	0x0800a650

08009cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	4904      	ldr	r1, [pc, #16]	; (8009ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cd8:	4804      	ldr	r0, [pc, #16]	; (8009cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cda:	f7fe fb71 	bl	80083c0 <USBD_GetString>
  return USBD_StrDesc;
 8009cde:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	200054f4 	.word	0x200054f4
 8009cec:	0800a668 	.word	0x0800a668

08009cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	221a      	movs	r2, #26
 8009d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d02:	f000 f843 	bl	8009d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d06:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	200000e4 	.word	0x200000e4

08009d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4907      	ldr	r1, [pc, #28]	; (8009d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d2a:	4808      	ldr	r0, [pc, #32]	; (8009d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d2c:	f7fe fb48 	bl	80083c0 <USBD_GetString>
 8009d30:	e004      	b.n	8009d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4904      	ldr	r1, [pc, #16]	; (8009d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d36:	4805      	ldr	r0, [pc, #20]	; (8009d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d38:	f7fe fb42 	bl	80083c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d3c:	4b02      	ldr	r3, [pc, #8]	; (8009d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200054f4 	.word	0x200054f4
 8009d4c:	0800a67c 	.word	0x0800a67c

08009d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4907      	ldr	r1, [pc, #28]	; (8009d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d66:	4808      	ldr	r0, [pc, #32]	; (8009d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d68:	f7fe fb2a 	bl	80083c0 <USBD_GetString>
 8009d6c:	e004      	b.n	8009d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4904      	ldr	r1, [pc, #16]	; (8009d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d72:	4805      	ldr	r0, [pc, #20]	; (8009d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d74:	f7fe fb24 	bl	80083c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	200054f4 	.word	0x200054f4
 8009d88:	0800a688 	.word	0x0800a688

08009d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d92:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <Get_SerialNum+0x44>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d98:	4b0e      	ldr	r3, [pc, #56]	; (8009dd4 <Get_SerialNum+0x48>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <Get_SerialNum+0x4c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4413      	add	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009db2:	2208      	movs	r2, #8
 8009db4:	4909      	ldr	r1, [pc, #36]	; (8009ddc <Get_SerialNum+0x50>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f814 	bl	8009de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	4908      	ldr	r1, [pc, #32]	; (8009de0 <Get_SerialNum+0x54>)
 8009dc0:	68b8      	ldr	r0, [r7, #8]
 8009dc2:	f000 f80f 	bl	8009de4 <IntToUnicode>
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	1fff7a10 	.word	0x1fff7a10
 8009dd4:	1fff7a14 	.word	0x1fff7a14
 8009dd8:	1fff7a18 	.word	0x1fff7a18
 8009ddc:	200000e6 	.word	0x200000e6
 8009de0:	200000f6 	.word	0x200000f6

08009de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009df6:	2300      	movs	r3, #0
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e027      	b.n	8009e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	0f1b      	lsrs	r3, r3, #28
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d80b      	bhi.n	8009e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	0f1b      	lsrs	r3, r3, #28
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	440b      	add	r3, r1
 8009e14:	3230      	adds	r2, #48	; 0x30
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e00a      	b.n	8009e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0f1b      	lsrs	r3, r3, #28
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4619      	mov	r1, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3237      	adds	r2, #55	; 0x37
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
 8009e4c:	7dfa      	ldrb	r2, [r7, #23]
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d3d3      	bcc.n	8009dfc <IntToUnicode+0x18>
  }
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
	...

08009e64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	609a      	str	r2, [r3, #8]
 8009e78:	60da      	str	r2, [r3, #12]
 8009e7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e84:	d147      	bne.n	8009f16 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]
 8009e8a:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	6313      	str	r3, [r2, #48]	; 0x30
 8009e96:	4b22      	ldr	r3, [pc, #136]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	481b      	ldr	r0, [pc, #108]	; (8009f24 <HAL_PCD_MspInit+0xc0>)
 8009eb8:	f7f7 fdee 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ebc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ece:	230a      	movs	r3, #10
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ed2:	f107 0314 	add.w	r3, r7, #20
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4812      	ldr	r0, [pc, #72]	; (8009f24 <HAL_PCD_MspInit+0xc0>)
 8009eda:	f7f7 fddd 	bl	8001a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ede:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	4a0f      	ldr	r2, [pc, #60]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee8:	6353      	str	r3, [r2, #52]	; 0x34
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef2:	4a0b      	ldr	r2, [pc, #44]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <HAL_PCD_MspInit+0xbc>)
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009f06:	2200      	movs	r2, #0
 8009f08:	2105      	movs	r1, #5
 8009f0a:	2043      	movs	r0, #67	; 0x43
 8009f0c:	f7f7 fd9a 	bl	8001a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f10:	2043      	movs	r0, #67	; 0x43
 8009f12:	f7f7 fdb3 	bl	8001a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f16:	bf00      	nop
 8009f18:	3728      	adds	r7, #40	; 0x28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	40023800 	.word	0x40023800
 8009f24:	40020000 	.word	0x40020000

08009f28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fd f8df 	bl	8007102 <USBD_LL_SetupStage>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f5e:	78fa      	ldrb	r2, [r7, #3]
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	78fb      	ldrb	r3, [r7, #3]
 8009f74:	4619      	mov	r1, r3
 8009f76:	f7fd f919 	bl	80071ac <USBD_LL_DataOutStage>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	334c      	adds	r3, #76	; 0x4c
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	78fb      	ldrb	r3, [r7, #3]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f7fd f9b2 	bl	8007312 <USBD_LL_DataInStage>
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b082      	sub	sp, #8
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fd fae6 	bl	8007596 <USBD_LL_SOF>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d102      	bne.n	8009fec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
 8009fea:	e008      	b.n	8009ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d102      	bne.n	8009ffa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
 8009ff8:	e001      	b.n	8009ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ffa:	f7f7 fa75 	bl	80014e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a004:	7bfa      	ldrb	r2, [r7, #15]
 800a006:	4611      	mov	r1, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd fa86 	bl	800751a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fa2e 	bl	8007476 <USBD_LL_Reset>
}
 800a01a:	bf00      	nop
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fa81 	bl	800753a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a058:	4b04      	ldr	r3, [pc, #16]	; (800a06c <HAL_PCD_SuspendCallback+0x48>)
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	4a03      	ldr	r2, [pc, #12]	; (800a06c <HAL_PCD_SuspendCallback+0x48>)
 800a05e:	f043 0306 	orr.w	r3, r3, #6
 800a062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	e000ed00 	.word	0xe000ed00

0800a070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fd fa71 	bl	8007566 <USBD_LL_Resume>
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a09e:	78fa      	ldrb	r2, [r7, #3]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd fac9 	bl	800763a <USBD_LL_IsoOUTIncomplete>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fd fa85 	bl	80075d6 <USBD_LL_IsoINIncomplete>
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fd fadb 	bl	800769e <USBD_LL_DevConnected>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fd fad8 	bl	80076b4 <USBD_LL_DevDisconnected>
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d13c      	bne.n	800a196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a11c:	4a20      	ldr	r2, [pc, #128]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a1e      	ldr	r2, [pc, #120]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a128:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a12c:	4b1c      	ldr	r3, [pc, #112]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a12e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a134:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a136:	2204      	movs	r2, #4
 800a138:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a13a:	4b19      	ldr	r3, [pc, #100]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a13c:	2202      	movs	r2, #2
 800a13e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a142:	2200      	movs	r2, #0
 800a144:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a146:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a148:	2202      	movs	r2, #2
 800a14a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a14c:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a14e:	2200      	movs	r2, #0
 800a150:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a154:	2200      	movs	r2, #0
 800a156:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a158:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a15e:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a160:	2201      	movs	r2, #1
 800a162:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a166:	2200      	movs	r2, #0
 800a168:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a16a:	480d      	ldr	r0, [pc, #52]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a16c:	f7f7 fe61 	bl	8001e32 <HAL_PCD_Init>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a176:	f7f7 f9b7 	bl	80014e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	4808      	ldr	r0, [pc, #32]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a17e:	f7f9 f8b8 	bl	80032f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a182:	2240      	movs	r2, #64	; 0x40
 800a184:	2100      	movs	r1, #0
 800a186:	4806      	ldr	r0, [pc, #24]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a188:	f7f9 f86c 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a18c:	2280      	movs	r2, #128	; 0x80
 800a18e:	2101      	movs	r1, #1
 800a190:	4803      	ldr	r0, [pc, #12]	; (800a1a0 <USBD_LL_Init+0x94>)
 800a192:	f7f9 f867 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200056f4 	.word	0x200056f4

0800a1a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7f7 ff56 	bl	800206c <HAL_PCD_Start>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f942 	bl	800a450 <USBD_Get_USB_Status>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	4608      	mov	r0, r1
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	70fb      	strb	r3, [r7, #3]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70bb      	strb	r3, [r7, #2]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a202:	78bb      	ldrb	r3, [r7, #2]
 800a204:	883a      	ldrh	r2, [r7, #0]
 800a206:	78f9      	ldrb	r1, [r7, #3]
 800a208:	f7f8 fc27 	bl	8002a5a <HAL_PCD_EP_Open>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f91c 	bl	800a450 <USBD_Get_USB_Status>
 800a218:	4603      	mov	r3, r0
 800a21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7f8 fc70 	bl	8002b2a <HAL_PCD_EP_Close>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f8fd 	bl	800a450 <USBD_Get_USB_Status>
 800a256:	4603      	mov	r3, r0
 800a258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7f8 fd48 	bl	8002d18 <HAL_PCD_EP_SetStall>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f8de 	bl	800a450 <USBD_Get_USB_Status>
 800a294:	4603      	mov	r3, r0
 800a296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a298:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7f8 fd8d 	bl	8002de0 <HAL_PCD_EP_ClrStall>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f8bf 	bl	800a450 <USBD_Get_USB_Status>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da0b      	bge.n	800a314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a302:	68f9      	ldr	r1, [r7, #12]
 800a304:	4613      	mov	r3, r2
 800a306:	00db      	lsls	r3, r3, #3
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	333e      	adds	r3, #62	; 0x3e
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	e00b      	b.n	800a32c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	4613      	mov	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a32a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	4611      	mov	r1, r2
 800a356:	4618      	mov	r0, r3
 800a358:	f7f8 fb5a 	bl	8002a10 <HAL_PCD_SetAddress>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f874 	bl	800a450 <USBD_Get_USB_Status>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	460b      	mov	r3, r1
 800a384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a394:	7af9      	ldrb	r1, [r7, #11]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	f7f8 fc73 	bl	8002c84 <HAL_PCD_EP_Transmit>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f853 	bl	800a450 <USBD_Get_USB_Status>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3d6:	7af9      	ldrb	r1, [r7, #11]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	f7f8 fbef 	bl	8002bbe <HAL_PCD_EP_Receive>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f832 	bl	800a450 <USBD_Get_USB_Status>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	460b      	mov	r3, r1
 800a404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f7f8 fc1f 	bl	8002c54 <HAL_PCD_EP_GetRxCount>
 800a416:	4603      	mov	r3, r0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <USBD_static_malloc+0x18>)
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20005c00 	.word	0x20005c00

0800a43c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	2b03      	cmp	r3, #3
 800a462:	d817      	bhi.n	800a494 <USBD_Get_USB_Status+0x44>
 800a464:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <USBD_Get_USB_Status+0x1c>)
 800a466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46a:	bf00      	nop
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a483 	.word	0x0800a483
 800a474:	0800a489 	.word	0x0800a489
 800a478:	0800a48f 	.word	0x0800a48f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73fb      	strb	r3, [r7, #15]
    break;
 800a480:	e00b      	b.n	800a49a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a482:	2303      	movs	r3, #3
 800a484:	73fb      	strb	r3, [r7, #15]
    break;
 800a486:	e008      	b.n	800a49a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
    break;
 800a48c:	e005      	b.n	800a49a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a48e:	2303      	movs	r3, #3
 800a490:	73fb      	strb	r3, [r7, #15]
    break;
 800a492:	e002      	b.n	800a49a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a494:	2303      	movs	r3, #3
 800a496:	73fb      	strb	r3, [r7, #15]
    break;
 800a498:	bf00      	nop
  }
  return usb_status;
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <__libc_init_array>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	4d0d      	ldr	r5, [pc, #52]	; (800a4e0 <__libc_init_array+0x38>)
 800a4ac:	4c0d      	ldr	r4, [pc, #52]	; (800a4e4 <__libc_init_array+0x3c>)
 800a4ae:	1b64      	subs	r4, r4, r5
 800a4b0:	10a4      	asrs	r4, r4, #2
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	42a6      	cmp	r6, r4
 800a4b6:	d109      	bne.n	800a4cc <__libc_init_array+0x24>
 800a4b8:	4d0b      	ldr	r5, [pc, #44]	; (800a4e8 <__libc_init_array+0x40>)
 800a4ba:	4c0c      	ldr	r4, [pc, #48]	; (800a4ec <__libc_init_array+0x44>)
 800a4bc:	f000 f834 	bl	800a528 <_init>
 800a4c0:	1b64      	subs	r4, r4, r5
 800a4c2:	10a4      	asrs	r4, r4, #2
 800a4c4:	2600      	movs	r6, #0
 800a4c6:	42a6      	cmp	r6, r4
 800a4c8:	d105      	bne.n	800a4d6 <__libc_init_array+0x2e>
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d0:	4798      	blx	r3
 800a4d2:	3601      	adds	r6, #1
 800a4d4:	e7ee      	b.n	800a4b4 <__libc_init_array+0xc>
 800a4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4da:	4798      	blx	r3
 800a4dc:	3601      	adds	r6, #1
 800a4de:	e7f2      	b.n	800a4c6 <__libc_init_array+0x1e>
 800a4e0:	0800a6b8 	.word	0x0800a6b8
 800a4e4:	0800a6b8 	.word	0x0800a6b8
 800a4e8:	0800a6b8 	.word	0x0800a6b8
 800a4ec:	0800a6bc 	.word	0x0800a6bc

0800a4f0 <memset>:
 800a4f0:	4402      	add	r2, r0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d100      	bne.n	800a4fa <memset+0xa>
 800a4f8:	4770      	bx	lr
 800a4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4fe:	e7f9      	b.n	800a4f4 <memset+0x4>

0800a500 <strncmp>:
 800a500:	b510      	push	{r4, lr}
 800a502:	b17a      	cbz	r2, 800a524 <strncmp+0x24>
 800a504:	4603      	mov	r3, r0
 800a506:	3901      	subs	r1, #1
 800a508:	1884      	adds	r4, r0, r2
 800a50a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a50e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a512:	4290      	cmp	r0, r2
 800a514:	d101      	bne.n	800a51a <strncmp+0x1a>
 800a516:	42a3      	cmp	r3, r4
 800a518:	d101      	bne.n	800a51e <strncmp+0x1e>
 800a51a:	1a80      	subs	r0, r0, r2
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	2800      	cmp	r0, #0
 800a520:	d1f3      	bne.n	800a50a <strncmp+0xa>
 800a522:	e7fa      	b.n	800a51a <strncmp+0x1a>
 800a524:	4610      	mov	r0, r2
 800a526:	e7f9      	b.n	800a51c <strncmp+0x1c>

0800a528 <_init>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	bf00      	nop
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr

0800a534 <_fini>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr
